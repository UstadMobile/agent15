package net.luminis.tls;

import at.favre.lib.crypto.HKDF;
import org.bouncycastle.asn1.x9.X9ECParameters;
import org.bouncycastle.crypto.ec.CustomNamedCurves;
import org.bouncycastle.jce.ECNamedCurveTable;
import org.bouncycastle.jce.ECPointUtil;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.jce.provider.asymmetric.ec.EC5Util;
import org.bouncycastle.jce.spec.ECNamedCurveParameterSpec;

import org.bouncycastle.math.ec.ECCurve;

import javax.crypto.Cipher;
import javax.crypto.KeyAgreement;
import javax.crypto.SecretKey;
import javax.crypto.spec.GCMParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.io.*;
import java.net.Socket;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.security.*;
import java.security.interfaces.ECKey;
import java.security.interfaces.ECPrivateKey;
import java.security.interfaces.ECPublicKey;
import java.security.spec.*;
import java.util.Base64;
import java.util.Random;

// TODO:
// algemeen: als input stream -1 teruggeeft...
public class Tls13 {

    public static final Charset ISO_8859_1 = Charset.forName("ISO-8859-1");

    static String server =
            // "tls13.pinterjann.is";       // -> Only x25519
            // "www.wolfssl.com";          // -> Handshake failure
            // "tls.ctf.network";          // -> Only x25519
            // "tls13.baishancloud.com";   // -> Handshake failure
            // "mew.org";                  // -> Handshake failure
            // "antagonist.nl"             // -> Handshake failure
            "rustls.jbp.io";   // Yes!

    private static byte[] serverHandshakeKey;
    private static byte[] serverHandshakeIV;
    private static ECPublicKey publicKey;

    private byte[] affineY;

    public static void main(String[] args) throws Exception {
        startTlsWithServer(server, 443);
    }

    public static void decryptCapturedMessages() throws Exception {
        Security.addProvider(new BouncyCastleProvider());

        byte[] sharedSecret = loadKeys().getEncoded();

        byte[] clientHello = new byte[] {
                (byte) 0x16, (byte) 0x03, (byte) 0x01, (byte) 0x00, (byte) 0xe5, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0xe1, (byte) 0x03, (byte) 0x03, (byte) 0x00, (byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x05, (byte) 0x06, (byte) 0x07, (byte) 0x08, (byte) 0x09, (byte) 0x0a, (byte) 0x0b, (byte) 0x0c, (byte) 0x0d, (byte) 0x0e, (byte) 0x0f, (byte) 0x10, (byte) 0x11, (byte) 0x12, (byte) 0x13, (byte) 0x14, (byte) 0x15, (byte) 0x16, (byte) 0x17, (byte) 0x18, (byte) 0x19, (byte) 0x1a, (byte) 0x1b, (byte) 0x1c, (byte) 0x1d, (byte) 0x1e, (byte) 0x1f, (byte) 0x20, (byte) 0xe0, (byte) 0xe1, (byte) 0xe2, (byte) 0xe3, (byte) 0xe4, (byte) 0xe5, (byte) 0xe6, (byte) 0xe7, (byte) 0xe8, (byte) 0xe9, (byte) 0xea, (byte) 0xeb, (byte) 0xec, (byte) 0xed, (byte) 0xee, (byte) 0xef, (byte) 0xf0, (byte) 0xf1, (byte) 0xf2, (byte) 0xf3, (byte) 0xf4, (byte) 0xf5, (byte) 0xf6, (byte) 0xf7, (byte) 0xf8, (byte) 0xf9, (byte) 0xfa, (byte) 0xfb, (byte) 0xfc, (byte) 0xfd, (byte) 0xfe, (byte) 0xff, (byte) 0x00, (byte) 0x06, (byte) 0x13, (byte) 0x01, (byte) 0x13, (byte) 0x02, (byte) 0x13, (byte) 0x03, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x92, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x12, (byte) 0x00, (byte) 0x10, (byte) 0x00, (byte) 0x00, (byte) 0x0d, (byte) 0x72, (byte) 0x75, (byte) 0x73, (byte) 0x74, (byte) 0x6c, (byte) 0x73, (byte) 0x2e, (byte) 0x6a, (byte) 0x62, (byte) 0x70, (byte) 0x2e, (byte) 0x69, (byte) 0x6f, (byte) 0x00, (byte) 0x0a, (byte) 0x00, (byte) 0x08, (byte) 0x00, (byte) 0x06, (byte) 0x00, (byte) 0x1d, (byte) 0x00, (byte) 0x17, (byte) 0x00, (byte) 0x18, (byte) 0x00, (byte) 0x0d, (byte) 0x00, (byte) 0x14, (byte) 0x00, (byte) 0x12, (byte) 0x04, (byte) 0x03, (byte) 0x08, (byte) 0x04, (byte) 0x04, (byte) 0x01, (byte) 0x05, (byte) 0x03, (byte) 0x08, (byte) 0x05, (byte) 0x05, (byte) 0x01, (byte) 0x08, (byte) 0x06, (byte) 0x06, (byte) 0x01, (byte) 0x02, (byte) 0x01, (byte) 0x00, (byte) 0x33, (byte) 0x00, (byte) 0x47, (byte) 0x00, (byte) 0x45, (byte) 0x00, (byte) 0x17, (byte) 0x00, (byte) 0x41, (byte) 0x04, (byte) 0x15, (byte) 0x20, (byte) 0x74, (byte) 0x4f, (byte) 0x92, (byte) 0x5d, (byte) 0x6b, (byte) 0x2c, (byte) 0xcd, (byte) 0x5f, (byte) 0xc0, (byte) 0xbc, (byte) 0x6c, (byte) 0xd4, (byte) 0xa7, (byte) 0x43, (byte) 0x18, (byte) 0x0d, (byte) 0x9b, (byte) 0x81, (byte) 0xbf, (byte) 0x35, (byte) 0x18, (byte) 0x74, (byte) 0xb0, (byte) 0x40, (byte) 0xc5, (byte) 0x4e, (byte) 0x9c, (byte) 0xf0, (byte) 0xc4, (byte) 0x20, (byte) 0x2d, (byte) 0xb0, (byte) 0xf3, (byte) 0x73, (byte) 0xab, (byte) 0x05, (byte) 0x31, (byte) 0x56, (byte) 0x53, (byte) 0xdd, (byte) 0x55, (byte) 0xda, (byte) 0xb9, (byte) 0x66, (byte) 0x5f, (byte) 0xbf, (byte) 0x24, (byte) 0x29, (byte) 0xcc, (byte) 0x68, (byte) 0x66, (byte) 0x99, (byte) 0xec, (byte) 0x18, (byte) 0x85, (byte) 0x2e, (byte) 0x57, (byte) 0x56, (byte) 0x12, (byte) 0xaa, (byte) 0x00, (byte) 0xe5, (byte) 0x00, (byte) 0x2d, (byte) 0x00, (byte) 0x02, (byte) 0x01, (byte) 0x01, (byte) 0x00, (byte) 0x2b, (byte) 0x00, (byte) 0x03, (byte) 0x02, (byte) 0x03, (byte) 0x04
        };
        byte[] serverHello = new byte[] {
                (byte) 0x16, (byte) 0x03, (byte) 0x03, (byte) 0x00, (byte) 0x9b, (byte) 0x02, (byte) 0x00, (byte) 0x00, (byte) 0x97, (byte) 0x03, (byte) 0x03, (byte) 0xc7, (byte) 0x7d, (byte) 0x9e, (byte) 0x38, (byte) 0xf7, (byte) 0xd3, (byte) 0xa9, (byte) 0x89, (byte) 0x79, (byte) 0x19, (byte) 0xde, (byte) 0xdb, (byte) 0x2b, (byte) 0xee, (byte) 0x07, (byte) 0x3a, (byte) 0x05, (byte) 0x4c, (byte) 0x0f, (byte) 0x1f, (byte) 0x65, (byte) 0xfa, (byte) 0x26, (byte) 0xbe, (byte) 0xd5, (byte) 0xba, (byte) 0x53, (byte) 0x19, (byte) 0x58, (byte) 0xf5, (byte) 0xc8, (byte) 0xed, (byte) 0x20, (byte) 0xe0, (byte) 0xe1, (byte) 0xe2, (byte) 0xe3, (byte) 0xe4, (byte) 0xe5, (byte) 0xe6, (byte) 0xe7, (byte) 0xe8, (byte) 0xe9, (byte) 0xea, (byte) 0xeb, (byte) 0xec, (byte) 0xed, (byte) 0xee, (byte) 0xef, (byte) 0xf0, (byte) 0xf1, (byte) 0xf2, (byte) 0xf3, (byte) 0xf4, (byte) 0xf5, (byte) 0xf6, (byte) 0xf7, (byte) 0xf8, (byte) 0xf9, (byte) 0xfa, (byte) 0xfb, (byte) 0xfc, (byte) 0xfd, (byte) 0xfe, (byte) 0xff, (byte) 0x13, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x4f, (byte) 0x00, (byte) 0x33, (byte) 0x00, (byte) 0x45, (byte) 0x00, (byte) 0x17, (byte) 0x00, (byte) 0x41, (byte) 0x04, (byte) 0xaf, (byte) 0x30, (byte) 0x93, (byte) 0xf3, (byte) 0xa0, (byte) 0x34, (byte) 0x26, (byte) 0x58, (byte) 0x3e, (byte) 0x50, (byte) 0xd6, (byte) 0x43, (byte) 0xa6, (byte) 0xe2, (byte) 0x24, (byte) 0xa8, (byte) 0xfe, (byte) 0x40, (byte) 0x3f, (byte) 0x8b, (byte) 0xce, (byte) 0x47, (byte) 0xfd, (byte) 0xb7, (byte) 0x50, (byte) 0x95, (byte) 0x22, (byte) 0xb1, (byte) 0x34, (byte) 0xa6, (byte) 0xb1, (byte) 0xcd, (byte) 0x5e, (byte) 0xe3, (byte) 0xbf, (byte) 0xe1, (byte) 0x19, (byte) 0x16, (byte) 0xa1, (byte) 0x8e, (byte) 0x14, (byte) 0xdb, (byte) 0xab, (byte) 0xaf, (byte) 0x5e, (byte) 0xba, (byte) 0x90, (byte) 0xdd, (byte) 0xbe, (byte) 0xfb, (byte) 0x8d, (byte) 0xc8, (byte) 0xd4, (byte) 0x15, (byte) 0x73, (byte) 0xa1, (byte) 0x90, (byte) 0x6f, (byte) 0xcd, (byte) 0xa9, (byte) 0x1d, (byte) 0x8a, (byte) 0x6a, (byte) 0xe3, (byte) 0x00, (byte) 0x2b, (byte) 0x00, (byte) 0x02, (byte) 0x03, (byte) 0x04
        };
        byte[] handshakeHash = computeHandshakeMessagesHash(clientHello, serverHello);

        computeSecrets(handshakeHash, sharedSecret);

        byte[] wrapper0 = new byte[] {
                (byte) 0x17, (byte) 0x03, (byte) 0x03, (byte) 0x00, (byte) 0x1b, (byte) 0x52, (byte) 0x38, (byte) 0x82, (byte) 0xe1, (byte) 0x85, (byte) 0xaf, (byte) 0x5a, (byte) 0xab, (byte) 0x87, (byte) 0x95, (byte) 0xe4, (byte) 0xa7, (byte) 0xf1, (byte) 0xc9, (byte) 0x36, (byte) 0xe7, (byte) 0x1d, (byte) 0xa2, (byte) 0x7a, (byte) 0x02, (byte) 0x0e, (byte) 0x79, (byte) 0xbe, (byte) 0x24, (byte) 0xef, (byte) 0x49, (byte) 0x50
        };
        byte[] decryptedData0 = decryptWrapper(wrapper0, serverHandshakeKey, serverHandshakeIV, 0);

        byte[] wrapper1 = getWrapper1();
        byte[] decryptedData1 = decryptWrapper(wrapper1, serverHandshakeKey, serverHandshakeIV, 1);

        byte[] wrapper2 = getWrapper2();
        byte[] decryptedData2 = decryptWrapper(wrapper2, serverHandshakeKey, serverHandshakeIV, 2);

        byte[] wrapper3 = getWrapper3();
        byte[] decryptedData3 = decryptWrapper(wrapper3, serverHandshakeKey, serverHandshakeIV, 3);
    }

    private static SecretKey loadKeys() throws Exception {
        String encodedPrivateKey = "3041020100301306072A8648CE3D020106082A8648CE3D030107042730250201010420D08C6D445FE18034132048565FB86A3C7BD32BF72991BCDAB2117A69105C0A06";
        KeyFactory fac = KeyFactory.getInstance("EC");
        EncodedKeySpec privKeySpec = new PKCS8EncodedKeySpec(hexToBytes(encodedPrivateKey));
        PrivateKey restoredPrivate = fac.generatePrivate(privKeySpec);
        System.out.println(restoredPrivate);
        System.out.println("private key: " + bytesToHex(restoredPrivate.getEncoded()));

        String encodedPublicKey = "3059301306072A8648CE3D020106082A8648CE3D030107034200041520744F925D6B2CCD5FC0BC6CD4A743180D9B81BF351874B040C54E9CF0C4202DB0F373AB05315653DD55DAB9665FBF2429CC686699EC18852E575612AA00E5";

        ECPublicKey restoredClientPublicKey = (ECPublicKey) fac.generatePublic(new X509EncodedKeySpec(hexToBytes(encodedPublicKey)));
        System.out.println(restoredClientPublicKey);
        System.out.println("public key: " + bytesToHex(restoredClientPublicKey.getEncoded()));
        System.out.println("public key Wx: " + restoredClientPublicKey.getW().getAffineX().toString(10));
        System.out.println("public key Wy: " + restoredClientPublicKey.getW().getAffineY().toString(10));

        String serverPublicKeyBytes = "af3093f3a03426583e50d643a6e224a8fe403f8bce47fdb7509522b134a6b1cd5ee3bfe11916a18e14dbabaf5eba90ddbefb8dc8d41573a1906fcda91d8a6ae3";
        ECPublicKey serverPublicKey = convertP256Key(hexToBytes(serverPublicKeyBytes));


        KeyAgreement keyAgreement = KeyAgreement.getInstance("ECDH", "BC");
        //KeyAgreement keyAgreement = KeyAgreement.getInstance("ECDH");
        keyAgreement.init(restoredPrivate);
        keyAgreement.doPhase(serverPublicKey, true);

        SecretKey key = keyAgreement.generateSecret("AES");
        //SecretKey key = keyAgreement.generateSecret("TlsPremasterSecret");
        System.out.println("Shared key: " + bytesToHex(key.getEncoded()));
        return key;
    }

    // https://bitcointalk.org/index.php?topic=2899.0
    public static ECPublicKey decodeKey(byte[] encoded) throws InvalidKeySpecException, NoSuchAlgorithmException, NoSuchProviderException{
        ECNamedCurveParameterSpec params = ECNamedCurveTable.getParameterSpec("secp256r1");
        KeyFactory fact = KeyFactory.getInstance("ECDSA", "BC");
        ECCurve curve = params.getCurve();
        EllipticCurve ellipticCurve = EC5Util.convertCurve(curve, params.getSeed());
        ECPoint point = ECPointUtil.decodePoint(ellipticCurve, encoded);
        ECParameterSpec params2 = EC5Util.convertSpec(ellipticCurve, params);
        ECPublicKeySpec keySpec = new java.security.spec.ECPublicKeySpec(point,params2);
        return (ECPublicKey) fact.generatePublic(keySpec);
    }

    private static byte[] computeHandshakeMessagesHash(byte[] clientHello, byte[] serverHello)throws Exception {

        ByteBuffer helloData = ByteBuffer.allocate(clientHello.length - 5 + serverHello.length - 5);
        helloData.put(clientHello, 5, clientHello.length - 5);
        helloData.put(serverHello, 5, serverHello.length - 5);

        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        byte[] helloHash = digest.digest(helloData.array());

        System.out.println("Hello hash: " + bytesToHex(helloHash));
        return helloHash;
    }

    private static void computeSecrets(byte[] helloHash, byte[] sharedSecret) throws Exception {
        HKDF hkdf = HKDF.fromHmacSha256();

        byte[] zeroSalt = new byte[32];
        byte[] zeroPSK = new byte[32];
        byte[] earlySecret = hkdf.extract(zeroSalt, zeroPSK);
        System.out.println("Early secret: " + bytesToHex(earlySecret));

        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        byte[] emptyHash = digest.digest(new byte[0]);
        System.out.println("Empty hash: " + bytesToHex(emptyHash));

        byte[] derivedSecret = hkdfExpandLabel(earlySecret, "derived", emptyHash, (short) 32);
        System.out.println("Derived secret: " + bytesToHex(derivedSecret));

        byte[] handshakeSecret = hkdf.extract(derivedSecret, sharedSecret);
        System.out.println("Handshake secret: " + bytesToHex(handshakeSecret));

        byte[] clientHandshakeTrafficSecret = hkdfExpandLabel(handshakeSecret, "c hs traffic", helloHash, (short) 32);
        System.out.println("Client handshake traffic secret: " + bytesToHex(clientHandshakeTrafficSecret));

        byte[] serverHandshakeTrafficSecret = hkdfExpandLabel(handshakeSecret, "s hs traffic", helloHash, (short) 32);
        System.out.println("Server handshake traffic secret: " + bytesToHex(serverHandshakeTrafficSecret));

        byte[] clientHandshakeKey = hkdfExpandLabel(clientHandshakeTrafficSecret, "key", "", (short) 16);
        System.out.println("Client handshake key: " + bytesToHex(clientHandshakeKey));

        serverHandshakeKey = hkdfExpandLabel(serverHandshakeTrafficSecret, "key", "", (short) 16);
        System.out.println("Server handshake key: " + bytesToHex(serverHandshakeKey));

        byte[] clientHandshakeIV = hkdfExpandLabel(clientHandshakeTrafficSecret, "iv", "", (short) 12);
        System.out.println("Client handshake iv: " + bytesToHex(clientHandshakeIV));

        serverHandshakeIV = hkdfExpandLabel(serverHandshakeTrafficSecret, "iv", "", (short) 12);
        System.out.println("Server handshake iv: " + bytesToHex(serverHandshakeIV));
    }

    private static byte[] decryptWrapper(byte[] wrapper, byte[] serverHandshakeKey, byte[] serverIV, int recordCount) throws Exception {
        int recordSize = (wrapper[3] & 0xff) << 8 | (wrapper[4] & 0xff);
        System.out.println("Wrapper length: " + wrapper.length + " bytes, record size: " + recordSize);

        byte[] recordHeader = new byte[5];
        byte[] encryptedData = new byte[recordSize - 16];
        byte[] authTag = new byte[16];
        System.arraycopy(wrapper, 0, recordHeader, 0, recordHeader.length);
        System.arraycopy(wrapper, 5, encryptedData, 0, encryptedData.length);
        System.arraycopy(wrapper, 5 + recordSize - 16, authTag, 0, authTag.length);

        byte[] message = new byte[recordSize];
        System.arraycopy(wrapper, 5, message, 0, message.length);

        System.out.println("Record data: " + bytesToHex(recordHeader));
        System.out.println("Encrypted data: " + bytesToHex(encryptedData, 8) + "..." + bytesToHex(encryptedData, encryptedData.length - 8, 8));
        System.out.println("Auth tag: " + bytesToHex(authTag));

        byte[] wrapped = decryptPayload(message, recordHeader, recordCount);
        System.out.println("Decrypted data (" + wrapped.length + "): " + bytesToHex(wrapped, 8) + "..." + bytesToHex(wrapped, wrapped.length - 8, 8));
        return wrapped;
    }

       static byte[] decryptPayload(byte[] message, byte[] associatedData, int recordNumber) throws Exception {
        ByteBuffer nonceInput = ByteBuffer.allocate(12);
        nonceInput.putInt(0);
        nonceInput.putLong((long) recordNumber);

        byte[] nonce = new byte[12];
        int i = 0;
        for (byte b : nonceInput.array())
            nonce[i] = (byte) (b ^ serverHandshakeIV[i++]);

        SecretKeySpec secretKey = new SecretKeySpec(serverHandshakeKey, "AES");
        String AES_GCM_NOPADDING = "AES/GCM/NoPadding";
        Cipher aeadCipher = Cipher.getInstance(AES_GCM_NOPADDING);
        GCMParameterSpec parameterSpec = new GCMParameterSpec(128, nonce);   // https://tools.ietf.org/html/rfc5116  5.3
        aeadCipher.init(Cipher.DECRYPT_MODE, secretKey, parameterSpec);

        aeadCipher.updateAAD(associatedData);
        return aeadCipher.doFinal(message);
    }

    public static void startTlsWithServer(String serverName, int serverPort) throws Exception {

        ECKey[] keys = generateKeys("secp256r1");
        ECPrivateKey privateKey = (ECPrivateKey) keys[0];
        publicKey = (ECPublicKey) keys[1];

        ByteBuffer message = new Tls13().clientHello();
        byte[] data = new byte[message.limit()];
        message.rewind();
        message.get(data);

        Socket socket = new Socket(serverName, serverPort);
        socket.getOutputStream().write(data);

        new TlsSession(data, privateKey, publicKey, new BufferedInputStream(socket.getInputStream()));
    }

    private static void parseServerMessages(PushbackInputStream input) throws IOException, TlsProtocolException {
        int contentType = input.read();

        while (contentType != -1) {
            input.unread(contentType);

            switch (contentType) {
                case 0:
                    throw new RuntimeException("Record type is 0 (invalid)");
                case 20:
                    new ChangeCipherSpec().parse(input);
                    break;
                case 21:
                    new Alert().parse(input);
                    break;
                case 22:
                    new HandshakeRecord().parse(input, null);
                    break;
                case 23:
                    new ApplicationData().parse(input, null);
                    break;
                default:
                    throw new RuntimeException("Record type is unknown (" + contentType + ")");
            }
            contentType = input.read();
        }
    }

    // Taken from https://tls13.ulfheim.net/

    ByteBuffer clientHello() throws Exception {

        ByteBuffer handshake = createHandshake();
        
        ByteBuffer buffer = ByteBuffer.allocate(handshake.limit() + 5);
        //  type is 0x16 (handshake record)
        buffer.put((byte) 0x16);
        // 03 01 - protocol version is "3,1" (also known as TLS 1.0)
        buffer.put(new byte[] { 0x03, 0x01} );
        // x bytes of handshake message follows
        buffer.putShort((short) handshake.limit());
        buffer.put(handshake);

        buffer.limit(buffer.position());
        return buffer;
    }

    private ByteBuffer createHandshake() {
        ByteBuffer clientHello = createClientHello();
        ByteBuffer buffer = ByteBuffer.allocate(clientHello.limit() + 4);
        // handshake message type 0x01 (client hello)
        buffer.put((byte) 0x01);
        // x bytes of client hello data follows
        buffer.put((byte) 0x00);
        buffer.putShort((short) clientHello.limit());
        buffer.put(clientHello);

        buffer.limit(buffer.position());
        buffer.rewind();
        return buffer;
    }

    private ByteBuffer createClientHello() {
        ByteBuffer buffer = ByteBuffer.allocate(2000);
        // client version
        buffer.put((byte) 0x03);
        buffer.put((byte) 0x03);

        // client random 32 bytes
        byte[] clientRandom = new byte[32];
        Random randomizer = new Random();
        randomizer.nextBytes(clientRandom);
        buffer.put(clientRandom);

        // session id (not used): 32 bytes with length prepended
        byte[] sessionId = new byte[32];
        randomizer.nextBytes(sessionId);
        buffer.put((byte) sessionId.length);
        buffer.put(sessionId);

        // Cipher suites (3, 6 bytes)
        buffer.put(new byte[]{
                (byte) 0x00, (byte) 0x06, (byte) 0x13, (byte) 0x01, (byte) 0x13, (byte) 0x02, (byte) 0x13, (byte) 0x03
        });

        // Compression (none)
        buffer.put(new byte[]{
                (byte) 0x01, (byte) 0x00
        });

        ByteBuffer extensions = createExtensions();
        buffer.putShort((short) extensions.limit());
        buffer.put(extensions);

        buffer.limit(buffer.position());
        buffer.rewind();
        return buffer;
    }

    private ByteBuffer createExtensions() {
        // Extension - Server Name
        short hostnameLength = (short) server.length();
        short extensionLength = (short) (hostnameLength + 2 + 1 + 2);
        ByteBuffer buffer = ByteBuffer.allocate(1000);
        // assigned value for extension "server name"
        buffer.put(new byte[] { (byte) 0x00, (byte) 0x00 });
        // x bytes of "server name" extension data follows
        buffer.putShort(extensionLength);
        // x bytes of first (and only) list entry follows
        buffer.putShort((short) (extensionLength - 2));
        // list entry is type 0x00 "DNS hostname"
        buffer.put((byte) 0x00);
        // x  bytes of hostname follows
        buffer.putShort(hostnameLength);
        buffer.put(server.getBytes(Charset.forName("ISO-8859-1")));

        // Extension - Supported Groups
        buffer.put(new byte[]{
                (byte) 0x00, (byte) 0x0a, (byte) 0x00, (byte) 0x08, (byte) 0x00, (byte) 0x06, (byte) 0x00, (byte) 0x1d, (byte) 0x00, (byte) 0x17, (byte) 0x00, (byte) 0x18
        });
        // Extension - Signature Algorithms
        buffer.put(new byte[]{
                (byte) 0x00, (byte) 0x0d, (byte) 0x00, (byte) 0x14, (byte) 0x00, (byte) 0x12, (byte) 0x04, (byte) 0x03, (byte) 0x08, (byte) 0x04, (byte) 0x04, (byte) 0x01, (byte) 0x05, (byte) 0x03, (byte) 0x08, (byte) 0x05, (byte) 0x05, (byte) 0x01, (byte) 0x08, (byte) 0x06, (byte) 0x06, (byte) 0x01, (byte) 0x02, (byte) 0x01
        });


        // Extension - Key Share

        // if server replies with hello retry request: https://crypto.stackexchange.com/questions/50754/tls-1-3-the-key-share-in-a-clienthello-after-a-helloretryrequest

        // assigned value for extension "Key Share"
        buffer.put(new byte[] { (byte) 0x00, (byte) 0x33 });
        // 71 bytes of "Key Share" extension data follows
        buffer.putShort((short) 71);
        // 69 bytes of key share data follows
        buffer.putShort((short) 69);
        // assigned value for secp256r1 (key exchange via secp256r1)
        buffer.put(new byte[] { (byte) 0x00, (byte) 0x17 });
        // 0x41 (65 bytes of public key follows
        buffer.putShort((short) 65);
        // public key
        byte[] publicKeyData = new byte[65];
        try {
            publicKeyData[0] = (byte) 0x04;
            byte[] affineX = publicKey.getW().getAffineX().toByteArray();
            System.arraycopy(affineX, 0, publicKeyData, 1, 32);
            affineY = publicKey.getW().getAffineY().toByteArray();
            System.arraycopy(affineY, 0, publicKeyData, 33, 32);
        } catch (Exception e) {
            e.printStackTrace();
        }
        buffer.put(publicKeyData);

        // Extension - PSK Key Exchange Modes
        buffer.put(new byte[]{
                (byte) 0x00, (byte) 0x2d, (byte) 0x00, (byte) 0x02, (byte) 0x01, (byte) 0x01
        });

        // Extension - Supported Versions
        buffer.put(new byte[]{
                (byte) 0x00, (byte) 0x2b, (byte) 0x00, (byte) 0x03, (byte) 0x02, (byte) 0x03, (byte) 0x04
        });

        buffer.limit(buffer.position());
        buffer.rewind();
        return buffer;
    }

    public static ECKey[] generateKeys(String ecCurve) throws Exception {
        KeyPairGenerator kpg;
        kpg = KeyPairGenerator.getInstance("EC");
        ECGenParameterSpec ecsp;
        ecsp = new ECGenParameterSpec(ecCurve);
        kpg.initialize(ecsp);

        KeyPair kp = kpg.genKeyPair();
        ECPrivateKey privKey = (ECPrivateKey) kp.getPrivate();
        ECPublicKey pubKey = (ECPublicKey) kp.getPublic();

        /*
        System.out.println("private key: " + privKey.toString());
        String f = privKey.getFormat();
        System.out.println("private key: " + bytesToHex(privKey.getEncoded()));
        System.out.println("private key:" + pubKey.toString());
        String g = pubKey.getFormat();
        System.out.println("public key:" + bytesToHex(pubKey.getEncoded()));
        System.out.println("public key:" + Base64.getDecoder().decode((pubKey.getEncoded())));
        System.out.println("public key W x: " + pubKey.getW().getAffineX());
        System.out.println("public key W x: " + pubKey.getW().getAffineX().toString(16));
        byte[] part1 = pubKey.getW().getAffineX().toByteArray();
        System.out.println("public key W y: " + pubKey.getW().getAffineY());
        System.out.println("public key params: " + pubKey.getParams());

        KeyFactory fac = KeyFactory.getInstance("EC");
        EncodedKeySpec privKeySpec = new PKCS8EncodedKeySpec(privKey.getEncoded());
        Object restoredPrivate = fac.generatePrivate(privKeySpec);
        System.out.println(restoredPrivate);
        System.out.println("Equal? " + (privKey.equals(restoredPrivate)));
*/
        return new ECKey[] { privKey, pubKey };
    }

    public static KeyPair generateECKeys() {
        try {

            X9ECParameters ecP = CustomNamedCurves.getByName("Curve25519");
            org.bouncycastle.jce.spec.ECParameterSpec ecSpec = new org.bouncycastle.jce.spec.ECParameterSpec(ecP.getCurve(), ecP.getG(),ecP.getN(), ecP.getH(), ecP.getSeed());

            KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("ECDH", "BC");

            keyPairGenerator.initialize(ecSpec);
            KeyPair keyPair = keyPairGenerator.generateKeyPair();

            PrivateKey privateKey = keyPair.getPrivate();
            System.out.println("Private: " + privateKey);
            System.out.println("Private: " + bytesToHex(privateKey.getEncoded()));
            PublicKey publicKey = keyPair.getPublic();
            System.out.println("Public: " + bytesToHex(publicKey.getEncoded()));

            return keyPair;
        } catch (NoSuchAlgorithmException | InvalidAlgorithmParameterException
                | NoSuchProviderException e) {
            e.printStackTrace();
            return null;
        }
    }

    private static byte[] P256_HEAD = Base64.getDecoder().decode("MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE");

    public static ECPublicKey convertP256Key(byte[] w) throws Exception {
        byte[] encodedKey = new byte[P256_HEAD.length + w.length];
        System.arraycopy(P256_HEAD, 0, encodedKey, 0, P256_HEAD.length);
        System.arraycopy(w, 0, encodedKey, P256_HEAD.length, w.length);
        KeyFactory eckf;
        try {
            eckf = KeyFactory.getInstance("EC");
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalStateException("EC key factory not present in runtime");
        }
        X509EncodedKeySpec ecpks = new X509EncodedKeySpec(encodedKey);
        return (ECPublicKey) eckf.generatePublic(ecpks);
    }

   static byte[] hkdfExpandLabel(byte[] secret, String label, String context, short length) {
        // See https://tools.ietf.org/html/rfc8446#section-7.1 for definition of HKDF-Expand-Label.
        ByteBuffer hkdfLabel = ByteBuffer.allocate(2 + 1 + 6 + label.getBytes(ISO_8859_1).length + 1 + context.getBytes(ISO_8859_1).length);
        hkdfLabel.putShort(length);
        hkdfLabel.put((byte) (6 + label.getBytes().length));
        // From https://tools.ietf.org/html/draft-ietf-quic-tls-16#section-5.1: 'the label for HKDF-Expand-Label uses the prefix "quic " rather than "tls13 "'
        hkdfLabel.put("tls13 ".getBytes(ISO_8859_1));
        hkdfLabel.put(label.getBytes(ISO_8859_1));
        hkdfLabel.put((byte) (context.getBytes(ISO_8859_1).length));
        hkdfLabel.put(context.getBytes(ISO_8859_1));
        HKDF hkdf = HKDF.fromHmacSha256();
        return hkdf.expand(secret, hkdfLabel.array(), length);
    }

    static byte[] hkdfExpandLabel(byte[] secret, String label, byte[] context, short length) {
        // See https://tools.ietf.org/html/rfc8446#section-7.1 for definition of HKDF-Expand-Label.
        ByteBuffer hkdfLabel = ByteBuffer.allocate(2 + 1 + 6 + label.getBytes(ISO_8859_1).length + 1 + context.length);
        hkdfLabel.putShort(length);
        hkdfLabel.put((byte) (6 + label.getBytes().length));
        // From https://tools.ietf.org/html/draft-ietf-quic-tls-16#section-5.1: 'the label for HKDF-Expand-Label uses the prefix "quic " rather than "tls13 "'
        hkdfLabel.put("tls13 ".getBytes(ISO_8859_1));
        hkdfLabel.put(label.getBytes(ISO_8859_1));
        hkdfLabel.put((byte) (context.length));
        hkdfLabel.put(context);
        HKDF hkdf = HKDF.fromHmacSha256();
        return hkdf.expand(secret, hkdfLabel.array(), length);
    }

    public static String bytesToHex(byte[] data, int length) {
        String digits = "0123456789ABCDEF";
        StringBuffer buffer = new StringBuffer();

        for (int i = 0; i != length; i++) {
            int v = data[i] & 0xff;

            buffer.append(digits.charAt(v >> 4));
            buffer.append(digits.charAt(v & 0xf));
        }

        return buffer.toString();
    }

    public static String bytesToHex(byte[] data) {
        return bytesToHex(data, data.length);
    }

    public static String bytesToHex(byte[] data, int offset, int length) {
        String digits = "0123456789abcdef";
        StringBuffer buffer = new StringBuffer();

        for (int i = 0; i != length; i++) {
            int v = data[offset+i] & 0xff;

            buffer.append(digits.charAt(v >> 4));
            buffer.append(digits.charAt(v & 0xf));
        }

        return buffer.toString();
    }


    public static byte[] hexToBytes(String string) {
        int length = string.length();
        byte[] data = new byte[length / 2];
        for (int i = 0; i < length; i += 2) {
            data[i / 2] = (byte) ((Character.digit(string.charAt(i), 16) << 4) + Character
                    .digit(string.charAt(i + 1), 16));
        }
        return data;
    }

    private static byte[] getWrapper1() {
        return new byte[] {
(byte) 0x17, (byte) 0x03, (byte) 0x03, (byte) 0x0a, (byte) 0xc2, (byte) 0xef, (byte) 0xf5, (byte) 0xe4, (byte) 0x3d, (byte) 0x26, (byte) 0x59, (byte) 0x1e, (byte) 0xb8, (byte) 0x31, (byte) 0x50, (byte) 0xcb,
(byte) 0xfe, (byte) 0xec, (byte) 0xd9, (byte) 0x6d, (byte) 0x55, (byte) 0x8e, (byte) 0xa0, (byte) 0x49, (byte) 0x3b, (byte) 0x6c, (byte) 0x8f, (byte) 0x47, (byte) 0xe9, (byte) 0xad, (byte) 0x95, (byte) 0x6f,
(byte) 0xf3, (byte) 0xb1, (byte) 0xc2, (byte) 0xe9, (byte) 0x1a, (byte) 0x1a, (byte) 0x57, (byte) 0xac, (byte) 0xaa, (byte) 0x5b, (byte) 0xe9, (byte) 0x5f, (byte) 0x05, (byte) 0x8c, (byte) 0x61, (byte) 0x97,
(byte) 0x2f, (byte) 0x20, (byte) 0x9e, (byte) 0x69, (byte) 0xa5, (byte) 0x7a, (byte) 0x0b, (byte) 0x3a, (byte) 0x36, (byte) 0x90, (byte) 0xa3, (byte) 0x05, (byte) 0xb3, (byte) 0x42, (byte) 0x9b, (byte) 0xbd,
(byte) 0x76, (byte) 0x78, (byte) 0xce, (byte) 0x1d, (byte) 0x93, (byte) 0x83, (byte) 0x4f, (byte) 0xa0, (byte) 0xe5, (byte) 0x41, (byte) 0x61, (byte) 0x5e, (byte) 0xb9, (byte) 0x63, (byte) 0x2c, (byte) 0x8f,
(byte) 0x27, (byte) 0x19, (byte) 0x4e, (byte) 0xf3, (byte) 0x57, (byte) 0x61, (byte) 0x21, (byte) 0xa8, (byte) 0xed, (byte) 0xe8, (byte) 0xaf, (byte) 0x6f, (byte) 0xef, (byte) 0x71, (byte) 0xe9, (byte) 0x43,
(byte) 0x19, (byte) 0xc2, (byte) 0x54, (byte) 0x56, (byte) 0x73, (byte) 0x66, (byte) 0xa3, (byte) 0x6e, (byte) 0x6a, (byte) 0x35, (byte) 0x64, (byte) 0x8e, (byte) 0x0b, (byte) 0x55, (byte) 0x51, (byte) 0xb8,
(byte) 0x2f, (byte) 0x13, (byte) 0xe2, (byte) 0x86, (byte) 0x2d, (byte) 0x40, (byte) 0x24, (byte) 0x02, (byte) 0x4a, (byte) 0xbc, (byte) 0xab, (byte) 0xf5, (byte) 0x62, (byte) 0x25, (byte) 0xac, (byte) 0x72,
(byte) 0xfc, (byte) 0x31, (byte) 0x66, (byte) 0x88, (byte) 0x1c, (byte) 0x5f, (byte) 0xa5, (byte) 0x46, (byte) 0x5b, (byte) 0xc4, (byte) 0xdb, (byte) 0x3c, (byte) 0x0c, (byte) 0x4b, (byte) 0x3f, (byte) 0xca,
(byte) 0x01, (byte) 0x92, (byte) 0xfb, (byte) 0xa0, (byte) 0x65, (byte) 0xb1, (byte) 0x2b, (byte) 0x9e, (byte) 0xa1, (byte) 0xb7, (byte) 0x23, (byte) 0xf3, (byte) 0x90, (byte) 0x31, (byte) 0x50, (byte) 0xed,
(byte) 0x1d, (byte) 0x01, (byte) 0x66, (byte) 0x4d, (byte) 0xe4, (byte) 0x06, (byte) 0xcd, (byte) 0x49, (byte) 0x25, (byte) 0xe4, (byte) 0x1b, (byte) 0xb5, (byte) 0xe3, (byte) 0x34, (byte) 0xf4, (byte) 0x92,
(byte) 0xd4, (byte) 0x93, (byte) 0xc3, (byte) 0x63, (byte) 0xdf, (byte) 0x50, (byte) 0x85, (byte) 0x96, (byte) 0x16, (byte) 0x1e, (byte) 0x3d, (byte) 0x78, (byte) 0x1b, (byte) 0xd4, (byte) 0xf7, (byte) 0x39,
(byte) 0xe8, (byte) 0xb6, (byte) 0xf7, (byte) 0x6c, (byte) 0xe2, (byte) 0x5a, (byte) 0x66, (byte) 0x18, (byte) 0xe3, (byte) 0x7a, (byte) 0xaf, (byte) 0x91, (byte) 0x49, (byte) 0xc7, (byte) 0xe6, (byte) 0x7e,
(byte) 0x3c, (byte) 0x84, (byte) 0xed, (byte) 0x2d, (byte) 0xca, (byte) 0x5f, (byte) 0x86, (byte) 0x9f, (byte) 0x35, (byte) 0xc2, (byte) 0xd0, (byte) 0xd2, (byte) 0x66, (byte) 0x52, (byte) 0xba, (byte) 0x93,
(byte) 0xe2, (byte) 0xf2, (byte) 0xa1, (byte) 0x9d, (byte) 0x79, (byte) 0xe5, (byte) 0xc1, (byte) 0xbc, (byte) 0xc2, (byte) 0x0f, (byte) 0xfe, (byte) 0x2f, (byte) 0x50, (byte) 0x4d, (byte) 0x80, (byte) 0x83,
(byte) 0xc9, (byte) 0x22, (byte) 0xe0, (byte) 0x59, (byte) 0xc7, (byte) 0x34, (byte) 0x5a, (byte) 0xb2, (byte) 0x74, (byte) 0xb0, (byte) 0x6d, (byte) 0xbe, (byte) 0x3d, (byte) 0xbb, (byte) 0x01, (byte) 0xd7,
(byte) 0x36, (byte) 0xb3, (byte) 0x98, (byte) 0xf7, (byte) 0x89, (byte) 0x5e, (byte) 0xbe, (byte) 0x85, (byte) 0xcc, (byte) 0xa4, (byte) 0x2f, (byte) 0x23, (byte) 0x67, (byte) 0xba, (byte) 0x3d, (byte) 0x1a,
(byte) 0xb5, (byte) 0x29, (byte) 0xbe, (byte) 0x2a, (byte) 0xfa, (byte) 0xcf, (byte) 0x4a, (byte) 0xaa, (byte) 0x5f, (byte) 0x07, (byte) 0xd5, (byte) 0xb4, (byte) 0x9c, (byte) 0x77, (byte) 0x2d, (byte) 0x91,
(byte) 0x2f, (byte) 0xba, (byte) 0x2a, (byte) 0x21, (byte) 0x43, (byte) 0x27, (byte) 0x32, (byte) 0x18, (byte) 0x8d, (byte) 0x22, (byte) 0xed, (byte) 0x9f, (byte) 0xbf, (byte) 0xc5, (byte) 0x28, (byte) 0x1f,
(byte) 0x41, (byte) 0xda, (byte) 0x58, (byte) 0xb0, (byte) 0x9c, (byte) 0x00, (byte) 0x26, (byte) 0x4f, (byte) 0x4d, (byte) 0xb9, (byte) 0x12, (byte) 0x68, (byte) 0xba, (byte) 0x38, (byte) 0x71, (byte) 0xa2,
(byte) 0x41, (byte) 0x18, (byte) 0xf6, (byte) 0xb3, (byte) 0x2a, (byte) 0x6d, (byte) 0xce, (byte) 0x84, (byte) 0x4e, (byte) 0x79, (byte) 0x83, (byte) 0x1e, (byte) 0x16, (byte) 0xb0, (byte) 0x0e, (byte) 0x38,
(byte) 0xd3, (byte) 0x12, (byte) 0x9e, (byte) 0xa0, (byte) 0xb9, (byte) 0xc8, (byte) 0x0d, (byte) 0x0d, (byte) 0xbc, (byte) 0x95, (byte) 0x98, (byte) 0x8f, (byte) 0x31, (byte) 0xbe, (byte) 0xdc, (byte) 0x15,
(byte) 0x58, (byte) 0xa2, (byte) 0x4f, (byte) 0x22, (byte) 0x3d, (byte) 0x30, (byte) 0xe5, (byte) 0x9e, (byte) 0x1c, (byte) 0x10, (byte) 0xaf, (byte) 0x47, (byte) 0x4a, (byte) 0x53, (byte) 0x68, (byte) 0x3c,
(byte) 0xa3, (byte) 0x73, (byte) 0xf6, (byte) 0xcc, (byte) 0xa6, (byte) 0xd7, (byte) 0x5c, (byte) 0x86, (byte) 0x8e, (byte) 0x1d, (byte) 0x93, (byte) 0xd3, (byte) 0xee, (byte) 0xa6, (byte) 0x5c, (byte) 0x90,
(byte) 0x80, (byte) 0x09, (byte) 0xd5, (byte) 0x59, (byte) 0xec, (byte) 0x26, (byte) 0x6b, (byte) 0x0c, (byte) 0x75, (byte) 0xdc, (byte) 0x98, (byte) 0x32, (byte) 0xff, (byte) 0xb4, (byte) 0x3c, (byte) 0x3f,
(byte) 0xdb, (byte) 0x65, (byte) 0x68, (byte) 0x10, (byte) 0xd2, (byte) 0xb2, (byte) 0x77, (byte) 0x31, (byte) 0xd6, (byte) 0x99, (byte) 0xe6, (byte) 0xa1, (byte) 0xfc, (byte) 0xc5, (byte) 0xf8, (byte) 0x3d,
(byte) 0xa2, (byte) 0x33, (byte) 0xe4, (byte) 0xdb, (byte) 0x34, (byte) 0x20, (byte) 0xfa, (byte) 0x72, (byte) 0x58, (byte) 0xfc, (byte) 0x69, (byte) 0xbc, (byte) 0x70, (byte) 0xf0, (byte) 0x00, (byte) 0xf0,
(byte) 0xfe, (byte) 0xff, (byte) 0x55, (byte) 0xe4, (byte) 0x19, (byte) 0x90, (byte) 0xfc, (byte) 0xcd, (byte) 0x70, (byte) 0x76, (byte) 0x85, (byte) 0x5e, (byte) 0xb1, (byte) 0xd4, (byte) 0x0c, (byte) 0xd4,
(byte) 0x11, (byte) 0x14, (byte) 0xa6, (byte) 0x9a, (byte) 0x35, (byte) 0x57, (byte) 0x00, (byte) 0x4b, (byte) 0x60, (byte) 0xb3, (byte) 0x69, (byte) 0x67, (byte) 0x8b, (byte) 0x3d, (byte) 0x50, (byte) 0x5e,
(byte) 0xd8, (byte) 0x98, (byte) 0xa5, (byte) 0x69, (byte) 0x33, (byte) 0x5d, (byte) 0xd9, (byte) 0x31, (byte) 0x0a, (byte) 0xe2, (byte) 0xc8, (byte) 0xee, (byte) 0x7e, (byte) 0xfd, (byte) 0xe4, (byte) 0x92,
(byte) 0x37, (byte) 0x00, (byte) 0x62, (byte) 0x46, (byte) 0xa0, (byte) 0xe5, (byte) 0x2b, (byte) 0xca, (byte) 0x58, (byte) 0x67, (byte) 0x8c, (byte) 0x49, (byte) 0x0d, (byte) 0xff, (byte) 0xe5, (byte) 0x6b,
(byte) 0x4a, (byte) 0xf1, (byte) 0x98, (byte) 0xc3, (byte) 0x91, (byte) 0x68, (byte) 0x24, (byte) 0xd0, (byte) 0x98, (byte) 0x36, (byte) 0xb7, (byte) 0x75, (byte) 0xc7, (byte) 0x0b, (byte) 0xfa, (byte) 0x46,
(byte) 0xfc, (byte) 0x65, (byte) 0x98, (byte) 0xfa, (byte) 0x26, (byte) 0x6d, (byte) 0x55, (byte) 0xcf, (byte) 0xc4, (byte) 0x27, (byte) 0xb9, (byte) 0x57, (byte) 0xf4, (byte) 0x8f, (byte) 0xea, (byte) 0x4f,
(byte) 0xc9, (byte) 0x2a, (byte) 0x08, (byte) 0x30, (byte) 0x96, (byte) 0x57, (byte) 0xf1, (byte) 0xd7, (byte) 0x02, (byte) 0x7b, (byte) 0x9f, (byte) 0x9b, (byte) 0x53, (byte) 0xd8, (byte) 0x0a, (byte) 0xcf,
(byte) 0xa0, (byte) 0x05, (byte) 0x58, (byte) 0xa4, (byte) 0xe2, (byte) 0x80, (byte) 0xfd, (byte) 0xcf, (byte) 0xb3, (byte) 0xe9, (byte) 0x1e, (byte) 0x6e, (byte) 0xf4, (byte) 0xe2, (byte) 0xf4, (byte) 0xe1,
(byte) 0xe3, (byte) 0x56, (byte) 0xe7, (byte) 0x55, (byte) 0x76, (byte) 0x9c, (byte) 0x1c, (byte) 0x37, (byte) 0xe7, (byte) 0xf6, (byte) 0xde, (byte) 0xcb, (byte) 0x30, (byte) 0x77, (byte) 0xc4, (byte) 0x78,
(byte) 0xc1, (byte) 0x8c, (byte) 0xa2, (byte) 0xff, (byte) 0xf1, (byte) 0x05, (byte) 0x40, (byte) 0xcb, (byte) 0x6e, (byte) 0x35, (byte) 0xff, (byte) 0xa6, (byte) 0x59, (byte) 0x08, (byte) 0x1c, (byte) 0x83,
(byte) 0x61, (byte) 0x1c, (byte) 0x2b, (byte) 0xe4, (byte) 0x22, (byte) 0x86, (byte) 0x88, (byte) 0x17, (byte) 0xf1, (byte) 0x26, (byte) 0x52, (byte) 0x7c, (byte) 0xe3, (byte) 0xf2, (byte) 0x48, (byte) 0xe5,
(byte) 0x4b, (byte) 0x02, (byte) 0x3a, (byte) 0x77, (byte) 0x49, (byte) 0x00, (byte) 0xe8, (byte) 0xb1, (byte) 0x0e, (byte) 0x15, (byte) 0x22, (byte) 0xbd, (byte) 0xa2, (byte) 0x80, (byte) 0x6b, (byte) 0xf3,
(byte) 0x55, (byte) 0xae, (byte) 0xee, (byte) 0x0d, (byte) 0x7f, (byte) 0xc3, (byte) 0xd2, (byte) 0x2d, (byte) 0x55, (byte) 0x55, (byte) 0xb4, (byte) 0x1e, (byte) 0x72, (byte) 0x8c, (byte) 0xba, (byte) 0x5c,
(byte) 0xfa, (byte) 0x70, (byte) 0xc6, (byte) 0x29, (byte) 0xce, (byte) 0xc1, (byte) 0x3f, (byte) 0x0c, (byte) 0x05, (byte) 0x64, (byte) 0xe6, (byte) 0x86, (byte) 0xa3, (byte) 0x74, (byte) 0x0e, (byte) 0x87,
(byte) 0x72, (byte) 0xd8, (byte) 0xd9, (byte) 0xf9, (byte) 0x40, (byte) 0x54, (byte) 0x11, (byte) 0xa5, (byte) 0x54, (byte) 0x3e, (byte) 0x5c, (byte) 0x8d, (byte) 0xcd, (byte) 0xf8, (byte) 0x3e, (byte) 0x09,
(byte) 0x7c, (byte) 0x2e, (byte) 0x85, (byte) 0x51, (byte) 0x97, (byte) 0xf4, (byte) 0x78, (byte) 0xd8, (byte) 0x42, (byte) 0xa7, (byte) 0x12, (byte) 0x0e, (byte) 0x58, (byte) 0xe5, (byte) 0x12, (byte) 0xe8,
(byte) 0x03, (byte) 0x0f, (byte) 0x35, (byte) 0x48, (byte) 0x07, (byte) 0x30, (byte) 0x45, (byte) 0x57, (byte) 0x43, (byte) 0xc7, (byte) 0x1f, (byte) 0x33, (byte) 0x3c, (byte) 0x83, (byte) 0x55, (byte) 0x5e,
(byte) 0x7c, (byte) 0x9e, (byte) 0xe2, (byte) 0xc4, (byte) 0x4f, (byte) 0x6d, (byte) 0x18, (byte) 0x6c, (byte) 0xe3, (byte) 0x4f, (byte) 0x47, (byte) 0x02, (byte) 0x95, (byte) 0x5f, (byte) 0xa5, (byte) 0x9e,
(byte) 0x9e, (byte) 0x93, (byte) 0x7a, (byte) 0x6d, (byte) 0xdf, (byte) 0xa5, (byte) 0x3d, (byte) 0x43, (byte) 0x87, (byte) 0x44, (byte) 0x5f, (byte) 0x9e, (byte) 0x8f, (byte) 0x14, (byte) 0xd5, (byte) 0x0a,
(byte) 0x74, (byte) 0xf7, (byte) 0x45, (byte) 0x05, (byte) 0x6e, (byte) 0x7f, (byte) 0x5e, (byte) 0x54, (byte) 0x45, (byte) 0x08, (byte) 0x49, (byte) 0x32, (byte) 0xb4, (byte) 0xef, (byte) 0x67, (byte) 0x09,
(byte) 0x66, (byte) 0x84, (byte) 0x33, (byte) 0xf0, (byte) 0x54, (byte) 0x6b, (byte) 0x1d, (byte) 0x2c, (byte) 0x41, (byte) 0x5c, (byte) 0x36, (byte) 0xc5, (byte) 0xe1, (byte) 0xc3, (byte) 0x55, (byte) 0x24,
(byte) 0x9c, (byte) 0x10, (byte) 0x97, (byte) 0xad, (byte) 0xed, (byte) 0x59, (byte) 0x53, (byte) 0xa3, (byte) 0x09, (byte) 0x54, (byte) 0xd2, (byte) 0x91, (byte) 0x87, (byte) 0xbe, (byte) 0x43, (byte) 0xfe,
(byte) 0x59, (byte) 0x9c, (byte) 0xf3, (byte) 0x65, (byte) 0xc9, (byte) 0xbf, (byte) 0xaf, (byte) 0x6f, (byte) 0xde, (byte) 0xda, (byte) 0x7d, (byte) 0x5f, (byte) 0x7d, (byte) 0x2b, (byte) 0x24, (byte) 0x5d,
(byte) 0xe8, (byte) 0x11, (byte) 0xce, (byte) 0x8a, (byte) 0x88, (byte) 0x1f, (byte) 0x44, (byte) 0xe5, (byte) 0x13, (byte) 0x10, (byte) 0x68, (byte) 0x71, (byte) 0x86, (byte) 0xea, (byte) 0x38, (byte) 0xd3,
(byte) 0x38, (byte) 0x06, (byte) 0x43, (byte) 0x99, (byte) 0x6b, (byte) 0xa7, (byte) 0xdc, (byte) 0xf0, (byte) 0x27, (byte) 0xb8, (byte) 0xe5, (byte) 0x25, (byte) 0xdc, (byte) 0xb9, (byte) 0x2b, (byte) 0xcd,
(byte) 0xd3, (byte) 0x6e, (byte) 0x55, (byte) 0x82, (byte) 0x63, (byte) 0x77, (byte) 0xb3, (byte) 0xf4, (byte) 0x0e, (byte) 0xca, (byte) 0x06, (byte) 0x80, (byte) 0xb9, (byte) 0x35, (byte) 0x60, (byte) 0xe5,
(byte) 0x26, (byte) 0xd6, (byte) 0x81, (byte) 0x1f, (byte) 0xd8, (byte) 0xe1, (byte) 0x6c, (byte) 0x63, (byte) 0x5d, (byte) 0xf9, (byte) 0x88, (byte) 0xa2, (byte) 0x74, (byte) 0x5e, (byte) 0xa4, (byte) 0x1e,
(byte) 0xa9, (byte) 0x16, (byte) 0x81, (byte) 0x6b, (byte) 0xe9, (byte) 0xe9, (byte) 0xec, (byte) 0x30, (byte) 0x43, (byte) 0xe3, (byte) 0xd9, (byte) 0xbf, (byte) 0xde, (byte) 0x19, (byte) 0xc4, (byte) 0x76,
(byte) 0x52, (byte) 0xa5, (byte) 0x5b, (byte) 0x4e, (byte) 0x28, (byte) 0x57, (byte) 0xe2, (byte) 0xfb, (byte) 0xd8, (byte) 0x7a, (byte) 0x3e, (byte) 0x65, (byte) 0x0c, (byte) 0xa7, (byte) 0x6e, (byte) 0x08,
(byte) 0xbc, (byte) 0xf7, (byte) 0x17, (byte) 0x1d, (byte) 0xac, (byte) 0x99, (byte) 0x3b, (byte) 0x33, (byte) 0x63, (byte) 0x82, (byte) 0xa2, (byte) 0x0f, (byte) 0x0f, (byte) 0x44, (byte) 0x95, (byte) 0xd3,
(byte) 0xe7, (byte) 0x80, (byte) 0x0e, (byte) 0xb9, (byte) 0xd9, (byte) 0x60, (byte) 0x3f, (byte) 0x07, (byte) 0x16, (byte) 0xc1, (byte) 0x9a, (byte) 0x02, (byte) 0x63, (byte) 0xa0, (byte) 0x77, (byte) 0x45,
(byte) 0x21, (byte) 0xad, (byte) 0xef, (byte) 0xd0, (byte) 0x5d, (byte) 0x2f, (byte) 0x17, (byte) 0x50, (byte) 0xbb, (byte) 0x2f, (byte) 0x0f, (byte) 0x79, (byte) 0x13, (byte) 0x28, (byte) 0xc9, (byte) 0x6d,
(byte) 0xb0, (byte) 0x96, (byte) 0x7c, (byte) 0xe9, (byte) 0x85, (byte) 0x82, (byte) 0xfe, (byte) 0x20, (byte) 0x92, (byte) 0xc7, (byte) 0x21, (byte) 0x9b, (byte) 0xe2, (byte) 0xba, (byte) 0x23, (byte) 0x2f,
(byte) 0xcb, (byte) 0x6c, (byte) 0x9f, (byte) 0x9e, (byte) 0x95, (byte) 0xd9, (byte) 0x68, (byte) 0xac, (byte) 0x53, (byte) 0x89, (byte) 0xd8, (byte) 0xbd, (byte) 0x73, (byte) 0x82, (byte) 0x35, (byte) 0xc1,
(byte) 0xb7, (byte) 0x1e, (byte) 0xcd, (byte) 0x3e, (byte) 0xf5, (byte) 0xc3, (byte) 0xff, (byte) 0xd7, (byte) 0x2d, (byte) 0xd1, (byte) 0x73, (byte) 0x4e, (byte) 0x74, (byte) 0x44, (byte) 0xed, (byte) 0x8d,
(byte) 0x47, (byte) 0x78, (byte) 0x7b, (byte) 0x13, (byte) 0x44, (byte) 0xd1, (byte) 0x3f, (byte) 0xf9, (byte) 0xa0, (byte) 0x51, (byte) 0x5a, (byte) 0xf3, (byte) 0x1d, (byte) 0xfe, (byte) 0x86, (byte) 0xd0,
(byte) 0x9b, (byte) 0x5f, (byte) 0x4e, (byte) 0x8a, (byte) 0x3f, (byte) 0xae, (byte) 0x63, (byte) 0x74, (byte) 0x45, (byte) 0x8c, (byte) 0x93, (byte) 0xec, (byte) 0x58, (byte) 0xad, (byte) 0x2d, (byte) 0xe5,
(byte) 0x80, (byte) 0x51, (byte) 0x29, (byte) 0x8b, (byte) 0xf7, (byte) 0x4b, (byte) 0x63, (byte) 0x8a, (byte) 0x31, (byte) 0xa1, (byte) 0xdf, (byte) 0xd5, (byte) 0x9e, (byte) 0xc8, (byte) 0x57, (byte) 0xac,
(byte) 0x1c, (byte) 0x0c, (byte) 0x74, (byte) 0xf7, (byte) 0x5b, (byte) 0xc8, (byte) 0x0f, (byte) 0xcb, (byte) 0xc2, (byte) 0x33, (byte) 0xe7, (byte) 0xae, (byte) 0x31, (byte) 0xfb, (byte) 0x9f, (byte) 0xb6,
(byte) 0x38, (byte) 0x1f, (byte) 0x0d, (byte) 0xdc, (byte) 0x47, (byte) 0x79, (byte) 0x43, (byte) 0x5f, (byte) 0xd2, (byte) 0x96, (byte) 0x81, (byte) 0x55, (byte) 0xa4, (byte) 0x54, (byte) 0x16, (byte) 0xab,
(byte) 0xdd, (byte) 0xe1, (byte) 0x31, (byte) 0xb6, (byte) 0x0d, (byte) 0x34, (byte) 0x99, (byte) 0x1a, (byte) 0xd8, (byte) 0x86, (byte) 0x56, (byte) 0xb1, (byte) 0xef, (byte) 0xde, (byte) 0x27, (byte) 0x27,
(byte) 0x8e, (byte) 0x2f, (byte) 0xb0, (byte) 0xe3, (byte) 0xe6, (byte) 0xdb, (byte) 0x0b, (byte) 0x6f, (byte) 0x80, (byte) 0xa3, (byte) 0x25, (byte) 0xf2, (byte) 0xff, (byte) 0x8d, (byte) 0x97, (byte) 0x2f,
(byte) 0xda, (byte) 0x78, (byte) 0xfa, (byte) 0x55, (byte) 0x57, (byte) 0x66, (byte) 0xbf, (byte) 0xf2, (byte) 0xc8, (byte) 0x23, (byte) 0x58, (byte) 0xae, (byte) 0x47, (byte) 0x9b, (byte) 0xd6, (byte) 0x18,
(byte) 0xec, (byte) 0xdd, (byte) 0xed, (byte) 0x97, (byte) 0xa7, (byte) 0x6e, (byte) 0x0c, (byte) 0xe5, (byte) 0xa8, (byte) 0xc6, (byte) 0xfa, (byte) 0x73, (byte) 0xae, (byte) 0x80, (byte) 0x36, (byte) 0xb5,
(byte) 0x33, (byte) 0x8b, (byte) 0xe8, (byte) 0x3e, (byte) 0x9c, (byte) 0xcb, (byte) 0x16, (byte) 0x4d, (byte) 0xa7, (byte) 0x7e, (byte) 0x03, (byte) 0x40, (byte) 0x5e, (byte) 0x6b, (byte) 0xc3, (byte) 0x0f,
(byte) 0xb2, (byte) 0xe1, (byte) 0x33, (byte) 0x3f, (byte) 0xd6, (byte) 0x9c, (byte) 0xc2, (byte) 0x06, (byte) 0x71, (byte) 0xb8, (byte) 0xc1, (byte) 0x11, (byte) 0x9d, (byte) 0xcc, (byte) 0x59, (byte) 0x82,
(byte) 0x06, (byte) 0x95, (byte) 0xe5, (byte) 0xe2, (byte) 0xa6, (byte) 0xcd, (byte) 0x2e, (byte) 0x31, (byte) 0xa8, (byte) 0x02, (byte) 0x29, (byte) 0x5e, (byte) 0x5f, (byte) 0xf3, (byte) 0x6d, (byte) 0x63,
(byte) 0x58, (byte) 0xb9, (byte) 0x1f, (byte) 0xd4, (byte) 0x90, (byte) 0xee, (byte) 0x2e, (byte) 0x63, (byte) 0x4a, (byte) 0x6b, (byte) 0xb8, (byte) 0x8d, (byte) 0xe9, (byte) 0x66, (byte) 0x97, (byte) 0x47,
(byte) 0x78, (byte) 0x6b, (byte) 0xfa, (byte) 0x6b, (byte) 0xef, (byte) 0xe0, (byte) 0x40, (byte) 0x54, (byte) 0xbc, (byte) 0x59, (byte) 0xc0, (byte) 0x89, (byte) 0xc3, (byte) 0xcf, (byte) 0xec, (byte) 0xcc,
(byte) 0xe9, (byte) 0xd8, (byte) 0xe1, (byte) 0x90, (byte) 0xc1, (byte) 0x11, (byte) 0x04, (byte) 0x5a, (byte) 0x27, (byte) 0xda, (byte) 0x01, (byte) 0x5d, (byte) 0x55, (byte) 0x23, (byte) 0x6a, (byte) 0x8e,
(byte) 0x63, (byte) 0xde, (byte) 0x6f, (byte) 0xb8, (byte) 0xae, (byte) 0x73, (byte) 0x1a, (byte) 0xa7, (byte) 0x72, (byte) 0xed, (byte) 0x03, (byte) 0xca, (byte) 0xf2, (byte) 0xf8, (byte) 0x92, (byte) 0xc7,
(byte) 0x1d, (byte) 0x44, (byte) 0xd9, (byte) 0x04, (byte) 0x16, (byte) 0xec, (byte) 0xf2, (byte) 0x5b, (byte) 0x5f, (byte) 0xd4, (byte) 0xac, (byte) 0xf6, (byte) 0xc7, (byte) 0xdf, (byte) 0x6f, (byte) 0x5a,
(byte) 0x42, (byte) 0x2e, (byte) 0x0b, (byte) 0x52, (byte) 0xbf, (byte) 0xa9, (byte) 0x1e, (byte) 0x0b, (byte) 0xd4, (byte) 0x7a, (byte) 0x03, (byte) 0xea, (byte) 0x16, (byte) 0x58, (byte) 0x42, (byte) 0x1d,
(byte) 0x04, (byte) 0x79, (byte) 0x1d, (byte) 0xdd, (byte) 0x2b, (byte) 0x4c, (byte) 0x92, (byte) 0x30, (byte) 0x32, (byte) 0x60, (byte) 0x35, (byte) 0x6d, (byte) 0x34, (byte) 0x6b, (byte) 0xff, (byte) 0xbd,
(byte) 0xcb, (byte) 0x63, (byte) 0xf7, (byte) 0x2f, (byte) 0x55, (byte) 0x28, (byte) 0xe9, (byte) 0xf0, (byte) 0xd5, (byte) 0x08, (byte) 0xaf, (byte) 0xcb, (byte) 0xa4, (byte) 0x54, (byte) 0x5e, (byte) 0x92,
(byte) 0x9e, (byte) 0xcb, (byte) 0x45, (byte) 0x20, (byte) 0x8e, (byte) 0x19, (byte) 0x11, (byte) 0x53, (byte) 0xa5, (byte) 0x87, (byte) 0xd8, (byte) 0x52, (byte) 0xf3, (byte) 0xbd, (byte) 0x5f, (byte) 0xf6,
(byte) 0x5e, (byte) 0xf3, (byte) 0x0b, (byte) 0x4c, (byte) 0x69, (byte) 0x8f, (byte) 0x02, (byte) 0x49, (byte) 0x30, (byte) 0xc7, (byte) 0x49, (byte) 0xa5, (byte) 0x61, (byte) 0xab, (byte) 0x7a, (byte) 0x8a,
(byte) 0x6f, (byte) 0xf2, (byte) 0xbc, (byte) 0xbc, (byte) 0x0d, (byte) 0x10, (byte) 0x4d, (byte) 0x68, (byte) 0x93, (byte) 0xfa, (byte) 0xdf, (byte) 0x9a, (byte) 0x5c, (byte) 0x6c, (byte) 0xe3, (byte) 0xa0,
(byte) 0xb2, (byte) 0xf1, (byte) 0xb2, (byte) 0xcd, (byte) 0x21, (byte) 0x52, (byte) 0x62, (byte) 0x7e, (byte) 0xf0, (byte) 0x45, (byte) 0x32, (byte) 0xb2, (byte) 0xa7, (byte) 0xbd, (byte) 0x64, (byte) 0xf1,
(byte) 0x2d, (byte) 0x21, (byte) 0xcd, (byte) 0x09, (byte) 0xf6, (byte) 0x6f, (byte) 0xc5, (byte) 0xf1, (byte) 0xcb, (byte) 0x1a, (byte) 0x24, (byte) 0xb0, (byte) 0x96, (byte) 0xbe, (byte) 0xc5, (byte) 0x50,
(byte) 0xe1, (byte) 0x0c, (byte) 0x47, (byte) 0x3e, (byte) 0xe1, (byte) 0xa8, (byte) 0x9b, (byte) 0x0e, (byte) 0x76, (byte) 0x79, (byte) 0x20, (byte) 0x6a, (byte) 0x16, (byte) 0x65, (byte) 0x0b, (byte) 0x3e,
(byte) 0x16, (byte) 0x66, (byte) 0x24, (byte) 0x69, (byte) 0xa4, (byte) 0xc4, (byte) 0xea, (byte) 0x4a, (byte) 0x19, (byte) 0x0d, (byte) 0x6f, (byte) 0x08, (byte) 0x3a, (byte) 0xa6, (byte) 0x44, (byte) 0x21,
(byte) 0x78, (byte) 0xc6, (byte) 0x92, (byte) 0xe4, (byte) 0x42, (byte) 0x3e, (byte) 0x7f, (byte) 0x06, (byte) 0x54, (byte) 0x73, (byte) 0x9f, (byte) 0x5a, (byte) 0x40, (byte) 0xb0, (byte) 0xf7, (byte) 0xef,
(byte) 0x9a, (byte) 0x53, (byte) 0x5c, (byte) 0x74, (byte) 0x21, (byte) 0x81, (byte) 0x8e, (byte) 0xb5, (byte) 0xd7, (byte) 0x90, (byte) 0x77, (byte) 0xdc, (byte) 0x7f, (byte) 0x45, (byte) 0x53, (byte) 0x8c,
(byte) 0x42, (byte) 0xef, (byte) 0xa5, (byte) 0xf2, (byte) 0x76, (byte) 0x65, (byte) 0x0b, (byte) 0xf5, (byte) 0x9c, (byte) 0x44, (byte) 0x01, (byte) 0x46, (byte) 0x73, (byte) 0x12, (byte) 0x52, (byte) 0x33,
(byte) 0xa3, (byte) 0x3a, (byte) 0x9b, (byte) 0x17, (byte) 0x7f, (byte) 0x0c, (byte) 0x25, (byte) 0x71, (byte) 0xc1, (byte) 0xa8, (byte) 0xbb, (byte) 0x3b, (byte) 0xcc, (byte) 0xea, (byte) 0x25, (byte) 0x04,
(byte) 0xc4, (byte) 0x35, (byte) 0x43, (byte) 0xc0, (byte) 0xf7, (byte) 0x1a, (byte) 0x3d, (byte) 0x64, (byte) 0x29, (byte) 0x3f, (byte) 0xdb, (byte) 0x0e, (byte) 0x69, (byte) 0x4d, (byte) 0x8c, (byte) 0xd4,
(byte) 0x94, (byte) 0x47, (byte) 0x6d, (byte) 0x82, (byte) 0x20, (byte) 0xcd, (byte) 0x63, (byte) 0xcb, (byte) 0xb3, (byte) 0x4a, (byte) 0xe3, (byte) 0x18, (byte) 0x59, (byte) 0x97, (byte) 0x7e, (byte) 0xc6,
(byte) 0x23, (byte) 0xfc, (byte) 0x50, (byte) 0xee, (byte) 0x24, (byte) 0x18, (byte) 0xc6, (byte) 0x58, (byte) 0x32, (byte) 0x6e, (byte) 0x2c, (byte) 0x53, (byte) 0x03, (byte) 0xbd, (byte) 0xd8, (byte) 0xe2,
(byte) 0x27, (byte) 0x73, (byte) 0x8f, (byte) 0x9c, (byte) 0xbf, (byte) 0x32, (byte) 0xe2, (byte) 0x2f, (byte) 0x28, (byte) 0xdc, (byte) 0x15, (byte) 0xe2, (byte) 0x81, (byte) 0xa7, (byte) 0x7b, (byte) 0x78,
(byte) 0x36, (byte) 0xc4, (byte) 0xdd, (byte) 0xe4, (byte) 0x7b, (byte) 0x14, (byte) 0x34, (byte) 0x97, (byte) 0x92, (byte) 0xdc, (byte) 0x20, (byte) 0x7e, (byte) 0x6b, (byte) 0xcd, (byte) 0xcd, (byte) 0xdc,
(byte) 0xde, (byte) 0x91, (byte) 0xea, (byte) 0x11, (byte) 0x18, (byte) 0xb2, (byte) 0xc3, (byte) 0x07, (byte) 0x16, (byte) 0x4c, (byte) 0x1a, (byte) 0x38, (byte) 0x63, (byte) 0x76, (byte) 0x3e, (byte) 0x72,
(byte) 0x2b, (byte) 0x5a, (byte) 0x2a, (byte) 0x68, (byte) 0x00, (byte) 0xf9, (byte) 0x3e, (byte) 0x12, (byte) 0x62, (byte) 0x2e, (byte) 0xc6, (byte) 0xc3, (byte) 0x2f, (byte) 0xa8, (byte) 0x74, (byte) 0x7d,
(byte) 0xa9, (byte) 0x7f, (byte) 0x47, (byte) 0xe5, (byte) 0x85, (byte) 0x49, (byte) 0xbd, (byte) 0x58, (byte) 0x16, (byte) 0x85, (byte) 0x36, (byte) 0x43, (byte) 0x1c, (byte) 0x99, (byte) 0x72, (byte) 0x39,
(byte) 0x26, (byte) 0xca, (byte) 0xd7, (byte) 0x44, (byte) 0xf7, (byte) 0xf6, (byte) 0x74, (byte) 0x1d, (byte) 0xce, (byte) 0xf2, (byte) 0x61, (byte) 0x8a, (byte) 0xcc, (byte) 0xc6, (byte) 0xe9, (byte) 0xae,
(byte) 0x84, (byte) 0x28, (byte) 0x29, (byte) 0xc1, (byte) 0xd8, (byte) 0xc5, (byte) 0x41, (byte) 0x75, (byte) 0x1d, (byte) 0x2a, (byte) 0x70, (byte) 0x88, (byte) 0xa2, (byte) 0x16, (byte) 0x30, (byte) 0x8d,
(byte) 0x3f, (byte) 0x4a, (byte) 0x0c, (byte) 0xae, (byte) 0xba, (byte) 0xdb, (byte) 0x7f, (byte) 0x65, (byte) 0x8e, (byte) 0x77, (byte) 0xea, (byte) 0x26, (byte) 0xe9, (byte) 0xad, (byte) 0x62, (byte) 0xea,
(byte) 0x57, (byte) 0x7d, (byte) 0x3e, (byte) 0xe8, (byte) 0xa7, (byte) 0x3d, (byte) 0xcd, (byte) 0x30, (byte) 0x4a, (byte) 0xec, (byte) 0x16, (byte) 0x13, (byte) 0xf7, (byte) 0xcc, (byte) 0xaf, (byte) 0xd6,
(byte) 0x61, (byte) 0x58, (byte) 0x5a, (byte) 0x2a, (byte) 0x3b, (byte) 0xde, (byte) 0xe3, (byte) 0x80, (byte) 0x73, (byte) 0xfd, (byte) 0xa4, (byte) 0x58, (byte) 0x30, (byte) 0xe3, (byte) 0x49, (byte) 0xf1,
(byte) 0x1b, (byte) 0x96, (byte) 0x86, (byte) 0xbc, (byte) 0xdd, (byte) 0x72, (byte) 0x3e, (byte) 0x29, (byte) 0x76, (byte) 0xba, (byte) 0x1e, (byte) 0x43, (byte) 0x1e, (byte) 0x2c, (byte) 0x4e, (byte) 0x65,
(byte) 0x35, (byte) 0xb6, (byte) 0x54, (byte) 0x97, (byte) 0x5d, (byte) 0x97, (byte) 0xf9, (byte) 0x9a, (byte) 0xd0, (byte) 0x3e, (byte) 0x15, (byte) 0x56, (byte) 0x6e, (byte) 0x6a, (byte) 0x52, (byte) 0xc6,
(byte) 0xcc, (byte) 0xdb, (byte) 0x85, (byte) 0xb4, (byte) 0x29, (byte) 0xfe, (byte) 0xdd, (byte) 0x22, (byte) 0xe2, (byte) 0xf5, (byte) 0x00, (byte) 0x00, (byte) 0x5f, (byte) 0x8d, (byte) 0xc5, (byte) 0x50,
(byte) 0xfa, (byte) 0x43, (byte) 0x4c, (byte) 0x99, (byte) 0xa7, (byte) 0xf2, (byte) 0x66, (byte) 0x45, (byte) 0x4f, (byte) 0x65, (byte) 0xa6, (byte) 0xa4, (byte) 0xb4, (byte) 0x46, (byte) 0x39, (byte) 0x64,
(byte) 0x56, (byte) 0x5e, (byte) 0xd0, (byte) 0x92, (byte) 0x19, (byte) 0x3f, (byte) 0xc3, (byte) 0xa7, (byte) 0x8d, (byte) 0x7b, (byte) 0xa4, (byte) 0x51, (byte) 0x65, (byte) 0x3c, (byte) 0x5e, (byte) 0x39,
(byte) 0x06, (byte) 0xe6, (byte) 0x2f, (byte) 0xfe, (byte) 0xb7, (byte) 0xa1, (byte) 0x3b, (byte) 0x51, (byte) 0x1a, (byte) 0x56, (byte) 0xc9, (byte) 0xff, (byte) 0x0f, (byte) 0xa0, (byte) 0x4e, (byte) 0x8c,
(byte) 0xd7, (byte) 0x3d, (byte) 0x86, (byte) 0x50, (byte) 0x28, (byte) 0x69, (byte) 0xca, (byte) 0x11, (byte) 0x11, (byte) 0x1c, (byte) 0xd8, (byte) 0x51, (byte) 0x07, (byte) 0xb7, (byte) 0xb4, (byte) 0x24,
(byte) 0x1f, (byte) 0x9b, (byte) 0x59, (byte) 0x5e, (byte) 0x5a, (byte) 0x47, (byte) 0xe6, (byte) 0x07, (byte) 0x92, (byte) 0xd5, (byte) 0xc0, (byte) 0x2a, (byte) 0x88, (byte) 0x80, (byte) 0xa1, (byte) 0x60,
(byte) 0x8f, (byte) 0x90, (byte) 0xd1, (byte) 0x47, (byte) 0xde, (byte) 0xf0, (byte) 0xa9, (byte) 0x70, (byte) 0x91, (byte) 0xe8, (byte) 0x8c, (byte) 0x15, (byte) 0x1f, (byte) 0xaf, (byte) 0x12, (byte) 0xaa,
(byte) 0x23, (byte) 0x40, (byte) 0xb2, (byte) 0x1d, (byte) 0x38, (byte) 0xa1, (byte) 0x30, (byte) 0x7e, (byte) 0x27, (byte) 0x61, (byte) 0xef, (byte) 0xbd, (byte) 0x4c, (byte) 0xbe, (byte) 0x17, (byte) 0xde,
(byte) 0x10, (byte) 0x5f, (byte) 0x93, (byte) 0x14, (byte) 0xbd, (byte) 0x36, (byte) 0x0d, (byte) 0x46, (byte) 0xf0, (byte) 0x09, (byte) 0xf3, (byte) 0x78, (byte) 0xa1, (byte) 0x46, (byte) 0xab, (byte) 0x8f,
(byte) 0x52, (byte) 0xf9, (byte) 0xa7, (byte) 0xc1, (byte) 0x52, (byte) 0xf6, (byte) 0xb8, (byte) 0xef, (byte) 0x17, (byte) 0x73, (byte) 0xb8, (byte) 0xce, (byte) 0x56, (byte) 0xc1, (byte) 0x53, (byte) 0xd4,
(byte) 0x7d, (byte) 0xc7, (byte) 0xf7, (byte) 0xd4, (byte) 0x5b, (byte) 0x72, (byte) 0xdb, (byte) 0x73, (byte) 0x80, (byte) 0xf1, (byte) 0x88, (byte) 0x0c, (byte) 0x06, (byte) 0x77, (byte) 0x48, (byte) 0x7c,
(byte) 0x92, (byte) 0x32, (byte) 0x45, (byte) 0x5f, (byte) 0xc0, (byte) 0xa2, (byte) 0x07, (byte) 0x9a, (byte) 0xff, (byte) 0xa7, (byte) 0xd0, (byte) 0x32, (byte) 0x50, (byte) 0x4c, (byte) 0x2d, (byte) 0xef,
(byte) 0xce, (byte) 0x9a, (byte) 0x55, (byte) 0x0a, (byte) 0xc7, (byte) 0x01, (byte) 0x4c, (byte) 0x2a, (byte) 0x6c, (byte) 0xf3, (byte) 0x74, (byte) 0xe9, (byte) 0xc9, (byte) 0x17, (byte) 0x11, (byte) 0x02,
(byte) 0xe5, (byte) 0x7c, (byte) 0x25, (byte) 0x0b, (byte) 0xbd, (byte) 0x9e, (byte) 0xb4, (byte) 0xb0, (byte) 0x95, (byte) 0x64, (byte) 0x74, (byte) 0x01, (byte) 0x36, (byte) 0x93, (byte) 0x4a, (byte) 0x2e,
(byte) 0x61, (byte) 0xa9, (byte) 0xe3, (byte) 0x6c, (byte) 0x04, (byte) 0xaa, (byte) 0x3c, (byte) 0xae, (byte) 0xd8, (byte) 0x77, (byte) 0xdd, (byte) 0x34, (byte) 0x30, (byte) 0xbf, (byte) 0xb4, (byte) 0xec,
(byte) 0xc5, (byte) 0x51, (byte) 0x95, (byte) 0x1a, (byte) 0xe5, (byte) 0x1a, (byte) 0xad, (byte) 0xbe, (byte) 0xf3, (byte) 0x6f, (byte) 0x66, (byte) 0x02, (byte) 0x09, (byte) 0xe6, (byte) 0xe3, (byte) 0xc4,
(byte) 0xf3, (byte) 0x90, (byte) 0x66, (byte) 0x9f, (byte) 0x5d, (byte) 0xb5, (byte) 0xef, (byte) 0xcf, (byte) 0x96, (byte) 0xe7, (byte) 0x1d, (byte) 0xbd, (byte) 0x68, (byte) 0x5c, (byte) 0x5a, (byte) 0x93,
(byte) 0x93, (byte) 0xde, (byte) 0x95, (byte) 0xcc, (byte) 0x25, (byte) 0x40, (byte) 0x83, (byte) 0x9a, (byte) 0xaf, (byte) 0x00, (byte) 0x7f, (byte) 0x22, (byte) 0x26, (byte) 0xa4, (byte) 0x6d, (byte) 0x90,
(byte) 0xdd, (byte) 0x96, (byte) 0xbe, (byte) 0x8f, (byte) 0xa1, (byte) 0xf7, (byte) 0x35, (byte) 0xff, (byte) 0x7d, (byte) 0x56, (byte) 0xe3, (byte) 0xc4, (byte) 0x0c, (byte) 0x50, (byte) 0x9d, (byte) 0x26,
(byte) 0x9f, (byte) 0x0f, (byte) 0x01, (byte) 0x6b, (byte) 0x53, (byte) 0x61, (byte) 0x5b, (byte) 0xff, (byte) 0xa0, (byte) 0x18, (byte) 0x9e, (byte) 0xee, (byte) 0x67, (byte) 0xf5, (byte) 0x8a, (byte) 0x44,
(byte) 0x70, (byte) 0x5f, (byte) 0x02, (byte) 0xf3, (byte) 0xc5, (byte) 0xdc, (byte) 0x7f, (byte) 0xd7, (byte) 0x0e, (byte) 0xa5, (byte) 0x0c, (byte) 0x93, (byte) 0xb4, (byte) 0xb0, (byte) 0xd8, (byte) 0x23,
(byte) 0xf4, (byte) 0x5c, (byte) 0x13, (byte) 0x7e, (byte) 0x36, (byte) 0x8e, (byte) 0x97, (byte) 0x7e, (byte) 0xe3, (byte) 0x27, (byte) 0x5f, (byte) 0x70, (byte) 0xdc, (byte) 0x11, (byte) 0xf0, (byte) 0xa8,
(byte) 0x2d, (byte) 0xd8, (byte) 0x5a, (byte) 0xb5, (byte) 0x39, (byte) 0x42, (byte) 0xc8, (byte) 0x89, (byte) 0xdc, (byte) 0xb4, (byte) 0x13, (byte) 0xf4, (byte) 0x23, (byte) 0xa9, (byte) 0x4b, (byte) 0x65,
(byte) 0x7a, (byte) 0x11, (byte) 0x5a, (byte) 0x98, (byte) 0xdc, (byte) 0xf0, (byte) 0xde, (byte) 0x1f, (byte) 0xcf, (byte) 0xbc, (byte) 0x41, (byte) 0xe2, (byte) 0xbc, (byte) 0xe3, (byte) 0x8f, (byte) 0x69,
(byte) 0x82, (byte) 0x86, (byte) 0x45, (byte) 0x1e, (byte) 0xbb, (byte) 0x16, (byte) 0x9a, (byte) 0xce, (byte) 0x85, (byte) 0x2b, (byte) 0xc2, (byte) 0x25, (byte) 0x3e, (byte) 0xbd, (byte) 0x00, (byte) 0x15,
(byte) 0xda, (byte) 0x0b, (byte) 0x63, (byte) 0x4e, (byte) 0x2a, (byte) 0x10, (byte) 0x53, (byte) 0x1f, (byte) 0xe9, (byte) 0xe9, (byte) 0x51, (byte) 0x5a, (byte) 0xcc, (byte) 0xe8, (byte) 0x1a, (byte) 0x23,
(byte) 0x32, (byte) 0x98, (byte) 0xba, (byte) 0x09, (byte) 0xf7, (byte) 0x60, (byte) 0x17, (byte) 0x21, (byte) 0xba, (byte) 0x4e, (byte) 0x1e, (byte) 0x88, (byte) 0xa4, (byte) 0x12, (byte) 0x66, (byte) 0xcf,
(byte) 0x32, (byte) 0x6f, (byte) 0x8e, (byte) 0x49, (byte) 0xaf, (byte) 0x30, (byte) 0xf5, (byte) 0xd6, (byte) 0xf8, (byte) 0x6f, (byte) 0x1d, (byte) 0x12, (byte) 0x72, (byte) 0xf7, (byte) 0x39, (byte) 0xbb,
(byte) 0x90, (byte) 0x65, (byte) 0x19, (byte) 0xab, (byte) 0x19, (byte) 0x1f, (byte) 0xc1, (byte) 0x16, (byte) 0x7a, (byte) 0x0f, (byte) 0x44, (byte) 0x3a, (byte) 0x09, (byte) 0x34, (byte) 0x8d, (byte) 0xf7,
(byte) 0x61, (byte) 0xe4, (byte) 0x14, (byte) 0xb9, (byte) 0x00, (byte) 0xa9, (byte) 0x24, (byte) 0x1c, (byte) 0x6e, (byte) 0x22, (byte) 0xc5, (byte) 0xe1, (byte) 0x1c, (byte) 0x8d, (byte) 0x2c, (byte) 0xd5,
(byte) 0xc3, (byte) 0xd4, (byte) 0x1a, (byte) 0x88, (byte) 0xcf, (byte) 0xaa, (byte) 0x77, (byte) 0x47, (byte) 0xfd, (byte) 0x21, (byte) 0xaa, (byte) 0xc1, (byte) 0xfd, (byte) 0x6f, (byte) 0xaf, (byte) 0xbf,
(byte) 0x9c, (byte) 0xfc, (byte) 0x14, (byte) 0xa0, (byte) 0xc9, (byte) 0x02, (byte) 0xb9, (byte) 0xb1, (byte) 0x1e, (byte) 0xb9, (byte) 0xc4, (byte) 0xa4, (byte) 0xdf, (byte) 0xfb, (byte) 0x0c, (byte) 0x32,
(byte) 0x4a, (byte) 0xd9, (byte) 0x5f, (byte) 0xf1, (byte) 0xa2, (byte) 0x2c, (byte) 0x4d, (byte) 0x5b, (byte) 0x1d, (byte) 0x50, (byte) 0xf2, (byte) 0xf4, (byte) 0xb6, (byte) 0x02, (byte) 0x15, (byte) 0x66,
(byte) 0xdb, (byte) 0xb3, (byte) 0x0f, (byte) 0x38, (byte) 0xd2, (byte) 0x1a, (byte) 0x1b, (byte) 0x77, (byte) 0x7e, (byte) 0x86, (byte) 0x2e, (byte) 0xb9, (byte) 0xb7, (byte) 0x74, (byte) 0x2d, (byte) 0x91,
(byte) 0x35, (byte) 0x2c, (byte) 0xf0, (byte) 0xb1, (byte) 0xc6, (byte) 0xb7, (byte) 0x95, (byte) 0xd2, (byte) 0x31, (byte) 0x90, (byte) 0x34, (byte) 0x9f, (byte) 0xed, (byte) 0x13, (byte) 0xa8, (byte) 0x14,
(byte) 0x5b, (byte) 0xb3, (byte) 0x8f, (byte) 0xf5, (byte) 0x45, (byte) 0x3d, (byte) 0x9d, (byte) 0x24, (byte) 0xad, (byte) 0x3b, (byte) 0x80, (byte) 0xec, (byte) 0x78, (byte) 0xe6, (byte) 0x75, (byte) 0x3e,
(byte) 0xdf, (byte) 0x6b, (byte) 0x10, (byte) 0xd7, (byte) 0xd8, (byte) 0xe7, (byte) 0x23, (byte) 0x04, (byte) 0xeb, (byte) 0xf4, (byte) 0x5e, (byte) 0x75, (byte) 0xe3, (byte) 0xa8, (byte) 0x18, (byte) 0xbd,
(byte) 0xe5, (byte) 0x54, (byte) 0x23, (byte) 0x50, (byte) 0xd3, (byte) 0xfb, (byte) 0x7b, (byte) 0xe6, (byte) 0x53, (byte) 0xe7, (byte) 0xa5, (byte) 0x28, (byte) 0xcb, (byte) 0x2c, (byte) 0x8a, (byte) 0x16,
(byte) 0x3f, (byte) 0xbe, (byte) 0x1b, (byte) 0x7f, (byte) 0xcf, (byte) 0x5f, (byte) 0x8a, (byte) 0xb6, (byte) 0x6b, (byte) 0xbc, (byte) 0xa5, (byte) 0xe6, (byte) 0x97, (byte) 0x5c, (byte) 0x82, (byte) 0x85,
(byte) 0xe5, (byte) 0x84, (byte) 0x9a, (byte) 0xda, (byte) 0xd2, (byte) 0x18, (byte) 0x57, (byte) 0x3d, (byte) 0xa6, (byte) 0x6c, (byte) 0x40, (byte) 0x9b, (byte) 0x01, (byte) 0x0d, (byte) 0x20, (byte) 0x97,
(byte) 0x3b, (byte) 0x45, (byte) 0xd9, (byte) 0x88, (byte) 0xb9, (byte) 0xc4, (byte) 0xe3, (byte) 0xf3, (byte) 0xab, (byte) 0xa1, (byte) 0xf7, (byte) 0x80, (byte) 0xe8, (byte) 0x46, (byte) 0xa6, (byte) 0x4a,
(byte) 0x7e, (byte) 0x68, (byte) 0xd6, (byte) 0x20, (byte) 0xb2, (byte) 0x43, (byte) 0x8b, (byte) 0x2e, (byte) 0x26, (byte) 0x7a, (byte) 0x1f, (byte) 0xf7, (byte) 0xf1, (byte) 0xfe, (byte) 0xd0, (byte) 0xae,
(byte) 0x6c, (byte) 0x60, (byte) 0x49, (byte) 0x0f, (byte) 0xfc, (byte) 0xf4, (byte) 0x22, (byte) 0x7a, (byte) 0x71, (byte) 0x4d, (byte) 0x7a, (byte) 0x63, (byte) 0xc6, (byte) 0x1f, (byte) 0x6a, (byte) 0x01,
(byte) 0xcf, (byte) 0x25, (byte) 0x2c, (byte) 0x66, (byte) 0x4d, (byte) 0x71, (byte) 0xef, (byte) 0x80, (byte) 0x9c, (byte) 0x40, (byte) 0xdc, (byte) 0x24, (byte) 0x87, (byte) 0xcd, (byte) 0x16, (byte) 0x66,
(byte) 0xe2, (byte) 0xa9, (byte) 0x04, (byte) 0x2c, (byte) 0x09, (byte) 0xda, (byte) 0xc9, (byte) 0xc7, (byte) 0xcb, (byte) 0x93, (byte) 0x21, (byte) 0xcf, (byte) 0x26, (byte) 0x9b, (byte) 0xfd, (byte) 0xfd,
(byte) 0xc7, (byte) 0xdb, (byte) 0x86, (byte) 0x79, (byte) 0x2a, (byte) 0x9c, (byte) 0x8c, (byte) 0x76, (byte) 0x57, (byte) 0xb9, (byte) 0xdd, (byte) 0x3d, (byte) 0xe1, (byte) 0x95, (byte) 0xfa, (byte) 0x35,
(byte) 0xf8, (byte) 0xcd, (byte) 0x5c, (byte) 0x0e, (byte) 0x0c, (byte) 0x7c, (byte) 0x2c, (byte) 0xf1, (byte) 0xd0, (byte) 0x1c, (byte) 0x38, (byte) 0xc6, (byte) 0xc0, (byte) 0x45, (byte) 0x21, (byte) 0xa1,
(byte) 0x3c, (byte) 0x46, (byte) 0x94, (byte) 0x3d, (byte) 0x50, (byte) 0x13, (byte) 0xb6, (byte) 0xb2, (byte) 0xa0, (byte) 0x97, (byte) 0xde, (byte) 0x78, (byte) 0x8b, (byte) 0x84, (byte) 0x61, (byte) 0x13,
(byte) 0x9a, (byte) 0x73, (byte) 0x40, (byte) 0x6a, (byte) 0xd8, (byte) 0x14, (byte) 0x01, (byte) 0x1b, (byte) 0x90, (byte) 0x60, (byte) 0xbb, (byte) 0x42, (byte) 0xca, (byte) 0x94, (byte) 0x5d, (byte) 0xc7,
(byte) 0x2b, (byte) 0x0f, (byte) 0x30, (byte) 0xf1, (byte) 0xd7, (byte) 0xb1, (byte) 0x00, (byte) 0xce, (byte) 0xa2, (byte) 0x3b, (byte) 0x47, (byte) 0xd6, (byte) 0xf1, (byte) 0xe1, (byte) 0x1a, (byte) 0x3d,
(byte) 0x99, (byte) 0xe4, (byte) 0x86, (byte) 0x75, (byte) 0x67, (byte) 0xa1, (byte) 0xe6, (byte) 0x84, (byte) 0x39, (byte) 0xe7, (byte) 0xe0, (byte) 0x84, (byte) 0xae, (byte) 0x24, (byte) 0x1e, (byte) 0x51,
(byte) 0xf3, (byte) 0x9b, (byte) 0x8f, (byte) 0xa4, (byte) 0x24, (byte) 0x88, (byte) 0x86, (byte) 0xd6, (byte) 0x76, (byte) 0xb6, (byte) 0x30, (byte) 0x2c, (byte) 0x28, (byte) 0xe3, (byte) 0x49, (byte) 0x5a,
(byte) 0xb2, (byte) 0x80, (byte) 0x32, (byte) 0xeb, (byte) 0xcf, (byte) 0x17, (byte) 0x06, (byte) 0x56, (byte) 0x74, (byte) 0xb3, (byte) 0xbd, (byte) 0xf3, (byte) 0x50, (byte) 0x03, (byte) 0xd2, (byte) 0x21,
(byte) 0x69, (byte) 0x06, (byte) 0x4b, (byte) 0x2e, (byte) 0xe1, (byte) 0xa2, (byte) 0x40, (byte) 0x05, (byte) 0xb5, (byte) 0xb1, (byte) 0x0a, (byte) 0x81, (byte) 0x7a, (byte) 0x1e, (byte) 0xdc, (byte) 0x9a,
(byte) 0x30, (byte) 0x35, (byte) 0x22, (byte) 0xe2, (byte) 0xcf, (byte) 0x71, (byte) 0xfe, (byte) 0xc0, (byte) 0xad, (byte) 0x58, (byte) 0xfd, (byte) 0x53, (byte) 0xe4, (byte) 0xe8, (byte) 0x52, (byte) 0xea,
(byte) 0xb3, (byte) 0x13, (byte) 0xeb, (byte) 0x54, (byte) 0x5c, (byte) 0x50, (byte) 0xce, (byte) 0xf8, (byte) 0xf6, (byte) 0x53, (byte) 0x2e, (byte) 0x9b, (byte) 0x35, (byte) 0xdb, (byte) 0x6f, (byte) 0xcf,
(byte) 0x90, (byte) 0xae, (byte) 0xda, (byte) 0x16, (byte) 0x7a, (byte) 0xde, (byte) 0xb2, (byte) 0x4b, (byte) 0x15, (byte) 0x73, (byte) 0x46, (byte) 0x7d, (byte) 0xa0, (byte) 0xae, (byte) 0x8b, (byte) 0xc7,
(byte) 0xf4, (byte) 0x63, (byte) 0x48, (byte) 0x80, (byte) 0x31, (byte) 0x0b, (byte) 0x9f, (byte) 0xae, (byte) 0xe0, (byte) 0xf9, (byte) 0x96, (byte) 0xd5, (byte) 0xf5, (byte) 0xac, (byte) 0x1b, (byte) 0xfc,
(byte) 0x96, (byte) 0xb7, (byte) 0x00, (byte) 0x61, (byte) 0x4a, (byte) 0x79, (byte) 0x0e, (byte) 0x94, (byte) 0x40, (byte) 0x44, (byte) 0x94, (byte) 0x29, (byte) 0xdc, (byte) 0x37, (byte) 0x52, (byte) 0x8a,
(byte) 0x68, (byte) 0xed, (byte) 0xbf, (byte) 0x08, (byte) 0x49, (byte) 0x93, (byte) 0x77, (byte) 0xa6, (byte) 0x5e, (byte) 0x07, (byte) 0x81, (byte) 0xb6, (byte) 0x4a, (byte) 0x42, (byte) 0x52, (byte) 0xad,
(byte) 0x09, (byte) 0x8e, (byte) 0x20, (byte) 0x74, (byte) 0xbe, (byte) 0xd8, (byte) 0x05, (byte) 0x95, (byte) 0x92, (byte) 0xb5, (byte) 0xf7, (byte) 0x76, (byte) 0xc3, (byte) 0xe6, (byte) 0x4c, (byte) 0xad,
(byte) 0x80, (byte) 0xb5, (byte) 0xd9, (byte) 0xf4, (byte) 0x55, (byte) 0x41, (byte) 0xbe, (byte) 0x2b, (byte) 0x71, (byte) 0x3c, (byte) 0x68, (byte) 0x21, (byte) 0x0f, (byte) 0xaf, (byte) 0xab, (byte) 0xcc,
(byte) 0x0d, (byte) 0xe4, (byte) 0x71, (byte) 0x96, (byte) 0x9a, (byte) 0x84, (byte) 0x0e, (byte) 0x56, (byte) 0x91, (byte) 0x2b, (byte) 0xcb, (byte) 0xf1, (byte) 0xdb, (byte) 0x92, (byte) 0x53, (byte) 0x48,
(byte) 0x70, (byte) 0x9e, (byte) 0x4b, (byte) 0x9e, (byte) 0x0b, (byte) 0x6b, (byte) 0x80, (byte) 0xd8, (byte) 0xea, (byte) 0x31, (byte) 0x9a, (byte) 0x20, (byte) 0xa3, (byte) 0xb5, (byte) 0x69, (byte) 0x14,
(byte) 0x74, (byte) 0xbe, (byte) 0x65, (byte) 0x50, (byte) 0xde, (byte) 0x6e, (byte) 0x25
        };
    }

    private static byte[] getWrapper2() {
        return new byte[]{
                (byte) 0x17, (byte) 0x03, (byte) 0x03, (byte) 0x01, (byte) 0x19, (byte) 0x7c, (byte) 0x5f, (byte) 0x12, (byte) 0x99, (byte) 0xbb, (byte) 0xc7, (byte) 0xda, (byte) 0xe2, (byte) 0x61, (byte) 0xcb, (byte) 0x2d, (byte) 0x6a, (byte) 0xc7, (byte) 0xd3, (byte) 0x97, (byte) 0x8b, (byte) 0x6c, (byte) 0x2f, (byte) 0x2a, (byte) 0x38, (byte) 0x3d, (byte) 0x7b, (byte) 0xf6, (byte) 0x4b, (byte) 0x6b, (byte) 0x9c, (byte) 0xf6, (byte) 0xa3, (byte) 0x65, (byte) 0xd0, (byte) 0x86, (byte) 0xaf, (byte) 0xe8, (byte) 0x82, (byte) 0xa5, (byte) 0xdd, (byte) 0x41, (byte) 0x34, (byte) 0x0a, (byte) 0x0b, (byte) 0x70, (byte) 0x99, (byte) 0xfb, (byte) 0xfa, (byte) 0x83, (byte) 0x2e, (byte) 0xc2, (byte) 0xd9, (byte) 0xf4, (byte) 0xc7, (byte) 0x0f, (byte) 0xe2, (byte) 0xf2, (byte) 0x30, (byte) 0x1d, (byte) 0xf7, (byte) 0xdd, (byte) 0x52, (byte) 0x0d, (byte) 0x32, (byte) 0xdb, (byte) 0x4d, (byte) 0xe3, (byte) 0xc2, (byte) 0x16, (byte) 0x38, (byte) 0xe8, (byte) 0xb1, (byte) 0x7f, (byte) 0x15, (byte) 0x3b, (byte) 0x92, (byte) 0x57, (byte) 0x9d, (byte) 0x60, (byte) 0x10, (byte) 0xd4, (byte) 0x9d, (byte) 0xbf, (byte) 0xc4, (byte) 0x93, (byte) 0xc1, (byte) 0x6e, (byte) 0x58, (byte) 0x3b, (byte) 0xdb, (byte) 0x87, (byte) 0x5c, (byte) 0x92, (byte) 0x06, (byte) 0x31, (byte) 0x25, (byte) 0x99, (byte) 0x2e, (byte) 0x8d, (byte) 0x42, (byte) 0x2a, (byte) 0xb8, (byte) 0xa2, (byte) 0x2d, (byte) 0x15, (byte) 0x2b, (byte) 0x0a, (byte) 0xee, (byte) 0x06, (byte) 0x7a, (byte) 0xdd, (byte) 0x23, (byte) 0xeb, (byte) 0x92, (byte) 0x01, (byte) 0xba, (byte) 0xce, (byte) 0x2d, (byte) 0x39, (byte) 0x54, (byte) 0xe8, (byte) 0x78, (byte) 0x05, (byte) 0x26, (byte) 0x0f, (byte) 0x55, (byte) 0x3c, (byte) 0x21, (byte) 0xf2, (byte) 0x47, (byte) 0xf0, (byte) 0x86, (byte) 0x99, (byte) 0x41, (byte) 0xd7, (byte) 0xa1, (byte) 0x47, (byte) 0xd6, (byte) 0xb2, (byte) 0x51, (byte) 0x86, (byte) 0xe3, (byte) 0x2a, (byte) 0xde, (byte) 0x62, (byte) 0x43, (byte) 0x95, (byte) 0x23, (byte) 0xe6, (byte) 0x86, (byte) 0x01, (byte) 0x8d, (byte) 0x9b, (byte) 0x86, (byte) 0xca, (byte) 0xb7, (byte) 0x94, (byte) 0x2b, (byte) 0xe1, (byte) 0x7e, (byte) 0x7b, (byte) 0x06, (byte) 0x89, (byte) 0x1c, (byte) 0x7d, (byte) 0x8a, (byte) 0x99, (byte) 0x12, (byte) 0x6e, (byte) 0xe8, (byte) 0x15, (byte) 0xc4, (byte) 0x94, (byte) 0x6c, (byte) 0x0d, (byte) 0x0b, (byte) 0xf0, (byte) 0x32, (byte) 0xbc, (byte) 0x93, (byte) 0x1e, (byte) 0x5b, (byte) 0x5b, (byte) 0x9c, (byte) 0xbf, (byte) 0x40, (byte) 0xdf, (byte) 0xb0, (byte) 0x50, (byte) 0x4f, (byte) 0x0a, (byte) 0x13, (byte) 0xfd, (byte) 0xa4, (byte) 0x40, (byte) 0x89, (byte) 0x96, (byte) 0x31, (byte) 0xc7, (byte) 0xd4, (byte) 0xc9, (byte) 0x52, (byte) 0xf7, (byte) 0xa6, (byte) 0xb9, (byte) 0x8e, (byte) 0xe8, (byte) 0x2c, (byte) 0xbb, (byte) 0x01, (byte) 0x68, (byte) 0x3b, (byte) 0x2d, (byte) 0xfd, (byte) 0x40, (byte) 0xdd, (byte) 0x0f, (byte) 0xe5, (byte) 0xbc, (byte) 0x05, (byte) 0x50, (byte) 0xc0, (byte) 0x5f, (byte) 0xab, (byte) 0x74, (byte) 0x87, (byte) 0xea, (byte) 0x97, (byte) 0x32, (byte) 0x73, (byte) 0x7a, (byte) 0xfa, (byte) 0x99, (byte) 0x66, (byte) 0xf5, (byte) 0x7e, (byte) 0x11, (byte) 0x9e, (byte) 0x26, (byte) 0x24, (byte) 0x6d, (byte) 0xa5, (byte) 0x16, (byte) 0xd6, (byte) 0x66, (byte) 0x7d, (byte) 0x4a, (byte) 0x38, (byte) 0x3c, (byte) 0xb9, (byte) 0x6b, (byte) 0x96, (byte) 0x12, (byte) 0x40, (byte) 0xe7, (byte) 0xe0, (byte) 0x56, (byte) 0x93, (byte) 0x48, (byte) 0xd9, (byte) 0x8b, (byte) 0xd8, (byte) 0xeb, (byte) 0x72, (byte) 0x24, (byte) 0x71, (byte) 0xd3, (byte) 0x40, (byte) 0xd4, (byte) 0x61, (byte) 0xff, (byte) 0xc6, (byte) 0x42, (byte) 0xf0, (byte) 0xb0, (byte) 0xcc, (byte) 0x40, (byte) 0xad, (byte) 0x24, (byte) 0x0a, (byte) 0x47, (byte) 0xd2, (byte) 0xa2, (byte) 0xb5, (byte) 0xbc
        };
    }

    private static byte[] getWrapper3() {
        return new byte[]{
                (byte) 0x17, (byte) 0x03, (byte) 0x03, (byte) 0x00, (byte) 0x35, (byte) 0xe3, (byte) 0xfd, (byte) 0x6d, (byte) 0x33, (byte) 0xd5, (byte) 0x2c, (byte) 0xd7, (byte) 0x82, (byte) 0x52, (byte) 0x65, (byte) 0x67, (byte) 0xd4, (byte) 0x6f, (byte) 0x48, (byte) 0x92, (byte) 0xb3, (byte) 0x2b, (byte) 0xe6, (byte) 0x1e, (byte) 0x90, (byte) 0x12, (byte) 0x84, (byte) 0x47, (byte) 0x16, (byte) 0x15, (byte) 0x9b, (byte) 0x62, (byte) 0x86, (byte) 0x5a, (byte) 0xfc, (byte) 0xbe, (byte) 0x3b, (byte) 0x4b, (byte) 0x3b, (byte) 0xc8, (byte) 0x83, (byte) 0xa0, (byte) 0x02, (byte) 0x4a, (byte) 0xfc, (byte) 0x38, (byte) 0x24, (byte) 0x35, (byte) 0xdc, (byte) 0x02, (byte) 0x10, (byte) 0x68, (byte) 0xf7, (byte) 0xca, (byte) 0x35, (byte) 0xdc, (byte) 0xbd, (byte) 0x26
        };
    }
}
